<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android多语言适配</title>
    <url>/2019/06/19/Android%E5%A4%9A%E8%AF%AD%E8%A8%80%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<p>Android多语言适配</p>
<a id="more"></a>
<h1 id="适配多语言主要就是两步"><a href="#适配多语言主要就是两步" class="headerlink" title="适配多语言主要就是两步"></a>适配多语言主要就是两步</h1><ul>
<li>创建针对适配语言values文件夹,比如values-zh,values-en</li>
<li>创建对应语言的Local</li>
</ul>
<h1 id="方便代码设置创建一个语言工具类-适配了Android7-0"><a href="#方便代码设置创建一个语言工具类-适配了Android7-0" class="headerlink" title="方便代码设置创建一个语言工具类,适配了Android7.0"></a>方便代码设置创建一个语言工具类,适配了Android7.0</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeLanguageHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context mContext = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String country = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHANGE_LANGUAGE_CHINA = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHANGE_LANGUAGE_ENGLISH = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHANGE_LANGUAGE_DEFAULT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String mLanguage = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Resources mResources;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Locale mDefaultLocale;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//mResources = context.getResources();</span></span><br><span class="line">        initResources(context);</span><br><span class="line">        country = context.getResources().getConfiguration().locale.getCountry();</span><br><span class="line"></span><br><span class="line">        mContext = context;</span><br><span class="line">        <span class="keyword">int</span> currentLanguage = SPUtils.getInstance().getInt(Constraint.APPLANGUAGE,<span class="number">0</span>);</span><br><span class="line">        changeLanguage(currentLanguage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前字符串资源的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStringById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String string ;</span><br><span class="line">        <span class="keyword">if</span> (mLanguage != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(mLanguage))&#123;</span><br><span class="line">            string = mResources.getString(id,mLanguage);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            string = mResources.getString(id,<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (string != <span class="keyword">null</span> &amp;&amp; string.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> string;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeLanguage</span><span class="params">(<span class="keyword">int</span> language)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Configuration config = mResources.getConfiguration();     <span class="comment">// 获得设置对象</span></span><br><span class="line">        DisplayMetrics dm = mResources.getDisplayMetrics();</span><br><span class="line">        <span class="keyword">switch</span> (language) &#123;</span><br><span class="line">            <span class="keyword">case</span> CHANGE_LANGUAGE_CHINA:</span><br><span class="line">                config.locale = Locale.SIMPLIFIED_CHINESE;     <span class="comment">// 中文</span></span><br><span class="line">                config.setLayoutDirection(Locale.SIMPLIFIED_CHINESE);</span><br><span class="line">                mLanguage = <span class="string">"zh-CN"</span>;</span><br><span class="line">                country = <span class="string">"CN"</span>;</span><br><span class="line">                SPUtils.getInstance().put(Constraint.APPLANGUAGE,CHANGE_LANGUAGE_CHINA);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CHANGE_LANGUAGE_ENGLISH:</span><br><span class="line">                config.locale = Locale.ENGLISH;   <span class="comment">// 英文</span></span><br><span class="line">                config.setLayoutDirection(Locale.ENGLISH);</span><br><span class="line">                mLanguage = <span class="string">"en"</span>;</span><br><span class="line">                country = <span class="string">"US"</span>;</span><br><span class="line">                SPUtils.getInstance().put(Constraint.APPLANGUAGE,CHANGE_LANGUAGE_ENGLISH);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> CHANGE_LANGUAGE_DEFAULT:</span><br><span class="line"></span><br><span class="line">                country = Locale.getDefault().getCountry();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"CN"</span>.equals(country))&#123;</span><br><span class="line">                    mDefaultLocale = Locale.SIMPLIFIED_CHINESE;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    mDefaultLocale =  Locale.ENGLISH;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                config.locale = mDefaultLocale;         <span class="comment">// 系统默认语言</span></span><br><span class="line">                config.setLayoutDirection(mDefaultLocale);</span><br><span class="line">                SPUtils.getInstance().put(Constraint.APPLANGUAGE,CHANGE_LANGUAGE_DEFAULT);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mResources.updateConfiguration(config, dm);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.N) &#123;</span><br><span class="line"></span><br><span class="line">            LanguageUtils.applyChange(mContext);</span><br><span class="line">        &#125;</span><br><span class="line">        EventBus.getDefault().post(<span class="string">"languageChanged"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initResources</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mResources = context.getResources();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getDefaultLanguage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"CN"</span>.equals(country));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LanguageUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Locale <span class="title">getSetLocale</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> currentLanguage = SPUtils.getInstance().getInt(Constraint.APPLANGUAGE,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (currentLanguage) &#123;</span><br><span class="line">                <span class="keyword">case</span> ChangeLanguageHelper.CHANGE_LANGUAGE_DEFAULT:</span><br><span class="line">                    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Resources.getSystem().getConfiguration().getLocales().get(<span class="number">0</span>);<span class="comment">//解决了获取系统默认错误的问题</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> Locale.getDefault();</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> ChangeLanguageHelper.CHANGE_LANGUAGE_CHINA:</span><br><span class="line">                    <span class="keyword">return</span> Locale.CHINA;</span><br><span class="line">                <span class="keyword">case</span> ChangeLanguageHelper.CHANGE_LANGUAGE_ENGLISH:</span><br><span class="line">                    <span class="keyword">return</span> Locale.ENGLISH;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> Locale.CHINA;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@TargetApi</span>(Build.VERSION_CODES.N)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">wrapContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Resources resources = context.getResources();</span><br><span class="line">            Locale locale = LanguageUtils.getSetLocale();</span><br><span class="line"></span><br><span class="line">            Configuration configuration = resources.getConfiguration();</span><br><span class="line">            configuration.setLocale(locale);</span><br><span class="line">            LocaleList localeList = <span class="keyword">new</span> LocaleList(locale);</span><br><span class="line">            LocaleList.setDefault(localeList);</span><br><span class="line">            configuration.setLocales(localeList);</span><br><span class="line">            <span class="keyword">return</span> context.createConfigurationContext(configuration);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applyChange</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            Resources res = context.getResources();</span><br><span class="line">            DisplayMetrics dm = res.getDisplayMetrics();</span><br><span class="line">            Configuration conf = res.getConfiguration();</span><br><span class="line"></span><br><span class="line">            Locale locale = getSetLocale();</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">                conf.setLocale(locale);</span><br><span class="line">                LocaleList localeList = <span class="keyword">new</span> LocaleList(locale);</span><br><span class="line">                LocaleList.setDefault(localeList);</span><br><span class="line">                conf.setLocales(localeList);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                conf.locale = locale;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    conf.setLayoutDirection(locale);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.updateConfiguration(conf, dm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><h2 id="MyApplication"><a href="#MyApplication" class="headerlink" title="MyApplication"></a>MyApplication</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">        </span><br><span class="line">    ...    </span><br><span class="line">    ChangeLanguageHelper.init(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="BaseActivity"><a href="#BaseActivity" class="headerlink" title="BaseActivity"></a>BaseActivity</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context newBase)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多语言适配兼容7.0</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N)&#123;</span><br><span class="line">            <span class="keyword">super</span>.attachBaseContext(ChangeLanguageHelper.LanguageUtils.wrapContext(newBase));</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(newBase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="手动切换语言"><a href="#手动切换语言" class="headerlink" title="手动切换语言"></a>手动切换语言</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ChangeLanguageHelper.changeLanguage(ChangeLanguageHelper.CHANGE_LANGUAGE_ENGLISH);</span><br></pre></td></tr></table></figure>

<h1 id="代码设置"><a href="#代码设置" class="headerlink" title="代码设置"></a>代码设置</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nameTv.setText(ChangeLanguageHelper.getStringById(R.string.login));</span><br></pre></td></tr></table></figure>

<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>设置默认会随着系统语言改变;语言设置后监听eventbus，重新走界面生命周期;<br>工具类来源于<a href="https://blog.csdn.net/sinat_35721133/article/details/78327111" target="_blank" rel="noopener">点这里</a></p>
<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin嵌套类内部类</title>
    <url>/2019/05/31/kotlin%E5%B5%8C%E5%A5%97%E7%B1%BB%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<p><figure class="banner" style="width:undefinedpx; height:undefinedpx;margin: 0 auto;">
      <img src="/medium-image-plugin/thumbnailsundefined" alt="travel" class="img-small" data-large="/imgundefined">
      </figure></p>
<a id="more"></a>
<h1 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line"></span><br><span class="line">    private var hobby:String = &quot;run&quot;</span><br><span class="line"></span><br><span class="line">    //嵌套类相当于java的静态内部类</span><br><span class="line">    class Student&#123;</span><br><span class="line"></span><br><span class="line">        private var name:String? = null</span><br><span class="line">        private val age by lazy &#123; 35 &#125;</span><br><span class="line"></span><br><span class="line">        fun intro()&#123;</span><br><span class="line"></span><br><span class="line">            print(&quot;i am a student&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //内部类</span><br><span class="line">    inner class Worker&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        fun intro()&#123;</span><br><span class="line">            //访问外部类</span><br><span class="line">            print(this@Person.hobby+&quot;i am a worker&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="外部调用"><a href="#外部调用" class="headerlink" title="外部调用"></a>外部调用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//调用嵌套类</span><br><span class="line">Person.Student().intro()</span><br><span class="line">//调用内部类</span><br><span class="line">Person().Worker().intro()</span><br></pre></td></tr></table></figure>

<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>LitePal数据库使用方法</title>
    <url>/2019/05/30/LitePal%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><figure class="banner" style="width:undefinedpx; height:undefinedpx;margin: 0 auto;">
      <img src="/medium-image-plugin/thumbnailsundefined" alt="litepal" class="img-small" data-large="/imgundefined">
      </figure><br>LitePal数据库使用方法</p>
<a id="more"></a>

<p>#在assets文件夹下创建litepal.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;litepal&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    	Define the database name of your application.</span><br><span class="line">    	By default each database name should be end with .db.</span><br><span class="line">    	If you didn&apos;t name your database end with .db,</span><br><span class="line">    	LitePal would plus the suffix automatically for you.</span><br><span class="line">    	For example:</span><br><span class="line">    	&lt;dbname value=&quot;demo&quot; /&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;dbname value=&quot;kotlin_demo&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">    	Define the version of your database. Each time you want</span><br><span class="line">    	to upgrade your database, the version tag would helps.</span><br><span class="line">    	Modify the models you defined in the mapping tag, and just</span><br><span class="line">    	make the version value plus one, the upgrade of database</span><br><span class="line">    	will be processed automatically without concern.</span><br><span class="line">			For example:</span><br><span class="line">    	&lt;version value=&quot;1&quot; /&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;version value=&quot;1&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">    	Define your models in the list with mapping tag, LitePal will</span><br><span class="line">    	create tables for each mapping class. The supported fields</span><br><span class="line">    	defined in models will be mapped into columns.</span><br><span class="line">    	For example:</span><br><span class="line">    	&lt;list&gt;</span><br><span class="line">    		&lt;mapping class=&quot;com.test.model.Reader&quot; /&gt;</span><br><span class="line">    		&lt;mapping class=&quot;com.test.model.Magazine&quot; /&gt;</span><br><span class="line">    	&lt;/list&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">        &lt;mapping class=&quot;com.sendinfo.kotlindemo.Video&quot; /&gt;</span><br><span class="line">    &lt;/list&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        Define where the .db file should be. &quot;internal&quot; means the .db file</span><br><span class="line">        will be stored in the database folder of internal storage which no</span><br><span class="line">        one can access. &quot;external&quot; means the .db file will be stored in the</span><br><span class="line">        path to the directory on the primary external storage device where</span><br><span class="line">        the application can place persistent files it owns which everyone</span><br><span class="line">        can access. &quot;internal&quot; will act as default.</span><br><span class="line">        For example:</span><br><span class="line">        &lt;storage value=&quot;external&quot; /&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/litepal&gt;</span><br><span class="line">说明：list节点下对应你的模型，会创建对应的表</span><br></pre></td></tr></table></figure>

<h1 id="app-build-gradle"><a href="#app-build-gradle" class="headerlink" title="app build.gradle"></a>app build.gradle</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &apos;org.litepal.android:kotlin:3.0.0&apos;</span><br></pre></td></tr></table></figure>

<h1 id="Application初始化"><a href="#Application初始化" class="headerlink" title="Application初始化"></a>Application初始化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LitePal.initialize(this)</span><br><span class="line">//监听数据库升级</span><br><span class="line">LitePal.registerDatabaseListener(object :DatabaseListener&#123;</span><br><span class="line">    override fun onCreate() &#123;</span><br><span class="line"></span><br><span class="line">        L.d(&quot;数据库已经创建&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onUpgrade(oldVersion: Int, newVersion: Int) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="模型类继承LitePalSupport"><a href="#模型类继承LitePalSupport" class="headerlink" title="模型类继承LitePalSupport"></a>模型类继承LitePalSupport</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data class Video(</span><br><span class="line"></span><br><span class="line">    var comment: String,</span><br><span class="line">    var down: String,</span><br><span class="line">    var forward: String,</span><br><span class="line">    var header: String,</span><br><span class="line">    var images: Any,</span><br><span class="line">    var name: String,</span><br><span class="line">    var passtime: String,</span><br><span class="line">    var sid: String,</span><br><span class="line">    var text: String,</span><br><span class="line">    var thumbnail: String,</span><br><span class="line">    var top_comments_content: Any,</span><br><span class="line">    var top_comments_header: Any,</span><br><span class="line">    var top_comments_name: Any,</span><br><span class="line">    var top_comments_uid: Any,</span><br><span class="line">    var top_comments_voiceuri: Any,</span><br><span class="line">    var type: String,</span><br><span class="line">    var uid: String,</span><br><span class="line">    var up: String,</span><br><span class="line">    var video: String</span><br><span class="line">):LitePalSupport()</span><br><span class="line">说明:</span><br><span class="line"> 1 id这个字段可写可不写，因为即使不写这个字段，LitePal也会在表中自动生成一个id列，毕竟每张表都一定要有主键的， 即不管实体类中有没有id这个属性，都会默认创建一个为整型的id字段，作为自增的主键。</span><br><span class="line"> id字段的值始终为当前记录的行号（下标从1开始），即使我们在实体类中定义了int或者long类型的id字段，在添加数据时人为的设置id的值为100,等其他值，查询数据库发现该id字段的值设置是无效的，她始终等于该条记录所在的行id，即第几条记录。</span><br><span class="line"> </span><br><span class="line">2 @Column(unique = true, defaultValue = &quot;unknown&quot;) 是唯一的，且默认值为unknown </span><br><span class="line">3 @Column(ignore = true) 忽略即是不在数据库中创建该属性对应的字段</span><br><span class="line">4 @Column(nullable = false) 不为空</span><br></pre></td></tr></table></figure>

<h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//模拟网络返回数据</span><br><span class="line">val mm = JsonParser.fromJsonObj(HttpRequest.data,Result::class.javaObjectType)</span><br><span class="line">var list = JsonParser.fromJsonArr(JsonParser.toJsonString(mm.result),</span><br><span class="line">    Video::class.java)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//插入</span><br><span class="line">list.forEach &#123; it</span><br><span class="line"></span><br><span class="line">    it.saveOrUpdate(&quot;uid=?&quot;,it.uid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//查询所有</span><br><span class="line">LitePal.findAll(Video::class.java).forEach &#123; it</span><br><span class="line"></span><br><span class="line">    L.d(it.name)</span><br><span class="line">&#125;</span><br><span class="line">//按照条件查询</span><br><span class="line">val alist  = LitePal.where(&quot;type = ?&quot;,&quot;video&quot;)</span><br><span class="line">    .order(&quot;uid&quot;)</span><br><span class="line">    .find&lt;Video&gt;()</span><br><span class="line">L.json(alist)</span><br></pre></td></tr></table></figure>

<h1 id="更详细使用请点击这里"><a href="#更详细使用请点击这里" class="headerlink" title="更详细使用请点击这里"></a><a href="https://blog.csdn.net/gpf1320253667/article/details/82819795" target="_blank" rel="noopener">更详细使用请点击这里</a></h1><script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>Kotlin</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>curl使用方法</title>
    <url>/2019/05/30/curl%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><figure class="banner" style="width:undefinedpx; height:undefinedpx;margin: 0 auto;">
      <img src="/medium-image-plugin/thumbnailsundefined" alt="curl" class="img-small" data-large="/imgundefined">
      </figure><br><strong>curl</strong>使用方法详解</p>
<a id="more"></a>

<h2 id="FTP上传"><a href="#FTP上传" class="headerlink" title="FTP上传"></a>FTP上传</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -T dodo1.JPG -u 用户名:密码 ftp://www.linux.com/img/</span><br></pre></td></tr></table></figure>

<h2 id="FTP下载"><a href="#FTP下载" class="headerlink" title="FTP下载"></a>FTP下载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -O -u 用户名:密码 ftp://www.linux.com/dodo1.JPG</span><br><span class="line">或</span><br><span class="line">curl -O ftp://用户名:密码@www.linux.com/dodo1.JPG</span><br></pre></td></tr></table></figure>

<h2 id="保存网页"><a href="#保存网页" class="headerlink" title="保存网页"></a>保存网页</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http://www.linux.com &gt;&gt; linux.html</span><br></pre></td></tr></table></figure>

<h2 id="获取网址头信息"><a href="#获取网址头信息" class="headerlink" title="获取网址头信息"></a>获取网址头信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl  -s  --head  www.sina.com</span><br></pre></td></tr></table></figure>

<h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http://mywebsite.com/index.php?a=1\&amp;b=2\&amp;c=3 -v</span><br><span class="line">或</span><br><span class="line">curl  -s  &quot;http://mywebsite.com/index.php?a=1&amp;b=2&amp;c=3&quot;</span><br></pre></td></tr></table></figure>

<h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl localhost:9999/api/daizhige/article -X POST -H &quot;Content-Type:application/json&quot; -d &quot;title=comewords&amp;content=articleContent&quot;</span><br><span class="line">说明:-X PUT 和 -X DELETE 来指定另外的请求方法。-d 参数，来传送我们的参数 -H 参数来申明请求的 header</span><br></pre></td></tr></table></figure>

<h2 id="POST上传文件"><a href="#POST上传文件" class="headerlink" title="POST上传文件"></a>POST上传文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl localhost:8000/api/v1/upimg -F &quot;file=@/Users/fungleo/Downloads/401.png&quot; -H &quot;token: 222&quot; -v</span><br><span class="line">说明:</span><br></pre></td></tr></table></figure>

<h1 id="参考一"><a href="#参考一" class="headerlink" title="参考一"></a><a href="https://www.cnblogs.com/duhuo/p/5695256.html" target="_blank" rel="noopener">参考一</a></h1><h1 id="参考二"><a href="#参考二" class="headerlink" title="参考二"></a><a href="https://blog.csdn.net/fungleo/article/details/80703365" target="_blank" rel="noopener">参考二</a></h1><script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin事件回调两种方式</title>
    <url>/2019/05/17/kotlin%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>记录学习kotlin过程中事件回调两种方式</p>
<a id="more"></a>

<h1 id="定义一个回调接口"><a href="#定义一个回调接口" class="headerlink" title="定义一个回调接口"></a>定义一个回调接口</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface NetCallBack &#123;</span><br><span class="line"></span><br><span class="line">    fun onSuccess(data: Any)</span><br><span class="line">    fun onFail(msg: String)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="模拟一个网络请求类"><a href="#模拟一个网络请求类" class="headerlink" title="模拟一个网络请求类"></a>模拟一个网络请求类</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> *     author : ghwang</span><br><span class="line"> *     e-mail : 429329513@qq.com</span><br><span class="line"> *     time   : 2019/05/17</span><br><span class="line"> *     desc   : 单利，类方法</span><br><span class="line"> * &lt;/pre&gt;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">object HttpRequest &#123;</span><br><span class="line"></span><br><span class="line">    private val resultCode: String by lazy &#123; &quot;0&quot; &#125;</span><br><span class="line"></span><br><span class="line">    //kotlin方式回调</span><br><span class="line">    lateinit var onSuccess: (data:Map&lt;String,String&gt;) -&gt; Unit</span><br><span class="line">    lateinit var onFail: (msg:String) -&gt; Unit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fun sendRequest(url: String,params:Map&lt;String,Any&gt;,callBack:NetCallBack)&#123;</span><br><span class="line"></span><br><span class="line">        when(resultCode)&#123;</span><br><span class="line"></span><br><span class="line">            &quot;0&quot; -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                //java方式回调</span><br><span class="line">                callBack.onSuccess(mapOf(&quot;data&quot; to &quot;lists&quot;))</span><br><span class="line">                //kotlin方式回调</span><br><span class="line"></span><br><span class="line">                onSuccess.invoke(mapOf(&quot;kotlinCallBack-Data&quot; to &quot;lists&quot;))</span><br><span class="line"></span><br><span class="line">            &#125;else -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            //java方式回调</span><br><span class="line">            callBack.onFail(&quot;error&quot;)</span><br><span class="line">            //kotlin方式回调</span><br><span class="line">            onFail.invoke(&quot;kotlinCallBack-Error&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="具体调用方式"><a href="#具体调用方式" class="headerlink" title="具体调用方式"></a>具体调用方式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//kotlin方式回调,为了方便测试先初始化好再发送请求</span><br><span class="line">HttpRequest.onSuccess = &#123;it</span><br><span class="line"></span><br><span class="line">    L.json(it)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HttpRequest.onFail = &#123;it</span><br><span class="line"></span><br><span class="line">    L.d(it)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HttpRequest.sendRequest(&quot;http&quot;, mapOf(&quot;foo&quot; to &quot;bar&quot;),object :NetCallBack&#123;</span><br><span class="line">    override fun onSuccess(data: Any) &#123;</span><br><span class="line"></span><br><span class="line">        L.json(data as Map&lt;String,String&gt;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onFail(msg: String) &#123;</span><br><span class="line"></span><br><span class="line">        L.d(msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Sweet</title>
    <url>/2019/03/26/Mac-Sweet/</url>
    <content><![CDATA[<p><figure class="banner" style="width:undefinedpx; height:undefinedpx;margin: 0 auto;">
      <img src="/medium-image-plugin/thumbnailsundefined" alt="Mac" class="img-small" data-large="/imgundefined">
      </figure><br>记录用Mac平时工作中一些环境安装及美化<br>ps:不定时更新</p>
<a id="more"></a>

<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><strong><a href="https://github.com/mas-cli/mas" target="_blank" rel="noopener">mas</a></strong><br>Mac App Store command line interface<br><strong><a href="https://www.jianshu.com/p/9e4e36ba8574" target="_blank" rel="noopener">cocoapods</a></strong><br>有关cocoapods文章中最舒服的一个<br><strong><a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">brew</a></strong><br>Mac下安装神器<br><strong><a href="http://www.genymotion.net/" target="_blank" rel="noopener">Genymotion</a></strong><br>Android好用一款模拟器 依赖<strong><a href="https://www.virtualbox.org/" target="_blank" rel="noopener">virtualbox</a></strong><br><strong><a href="https://github.com/iina/iina" target="_blank" rel="noopener">iina</a></strong><br>macos下视频播放器</p>
<h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><p><strong><a href="https://github.com/JohnCoates/Aerial" target="_blank" rel="noopener">Aerial</a></strong><br>视频屏保<br><strong><a href="http://wallpaperswide.com/" target="_blank" rel="noopener">wallpaperswide</a></strong><br>墙纸下载网址<br><strong><a href="http://adwallpapers.xyz/74232-amazing-mountains-4k-ultra-hd-wallpaper.html" target="_blank" rel="noopener">wallpager</a></strong><br>墙纸下载网址2<br><strong><a href="http://color-themes.com/" target="_blank" rel="noopener">Android Studio 颜色主题</a></strong><br>颜色主题<br><strong><a href="https://unsplash.com/" target="_blank" rel="noopener">unsplash</a></strong><br>博客素材来源网站，无需授权，任意使用<br><strong><a href="http://tracesof.net/uebersicht/" target="_blank" rel="noopener">uebersicht</a></strong><br>自定义桌面</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="AndroidStudio"><a href="#AndroidStudio" class="headerlink" title="AndroidStudio"></a>AndroidStudio</h2><h3 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h3><p>ps:外接键盘</p>
<ul>
<li><strong>win+shift+o //查找文件</strong></li>
<li><strong>win+o //查找类</strong></li>
<li><strong>win+shift+f //全局搜索</strong></li>
<li><strong>win+f //文件内搜索</strong></li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><a href="https://github.com/wuseal/JsonToKotlinClass" target="_blank" rel="noopener">JsonToKotlinClass</a></p>
<h2 id="XCode"><a href="#XCode" class="headerlink" title="XCode"></a>XCode</h2><script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS极客学习知识点记录</title>
    <url>/2019/03/21/iOS%E6%9E%81%E5%AE%A2%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><figure class="banner" style="width:undefinedpx; height:undefinedpx;margin: 0 auto;">
      <img src="/medium-image-plugin/thumbnailsundefined" alt="学习" class="img-small" data-large="/imgundefined">
      </figure><br>最近从网上买了一个iOS的系列教程,感觉现在开发到了瓶颈期，抱着活到老学到老的心态，主要也是想提高下自己，就决定毫不犹豫的买了这个教程。写这篇博客，主要目的就是想已笔记的形式记录每期的知识点，以便查看</p>
<a id="more"></a>

<h1 id="2019-03-21-链接器"><a href="#2019-03-21-链接器" class="headerlink" title="2019-03-21 链接器"></a><em>2019-03-21 链接器</em></h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>将符号(函数和变量)绑定到地址上</p>
<h2 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h2><ul>
<li>机器码:硬件可以直接执行的一组二进制指令,不同的计算机指令是不一样的</li>
<li>解释器:程序在运行时将代码文件处理成目标文件</li>
<li>编译器:将程序首先经过编译后就可以直接被硬件识别</li>
<li>编译器执行效率高，调试周期长;解释器执行效率低，调试方便灵活</li>
<li>LLVM:iOS开发使用的编译器</li>
</ul>
<h2 id="当我们点击Run时，LLVM都干了什么？"><a href="#当我们点击Run时，LLVM都干了什么？" class="headerlink" title="当我们点击Run时，LLVM都干了什么？"></a>当我们点击Run时，LLVM都干了什么？</h2><ol>
<li>代码预处理，将宏插入到对应的位置</li>
<li>将代码进行词法分析和语法分析，生成AST(抽象语法树，结构更清晰更简洁，便于遍历查找)</li>
<li>AST会生成IR(更接近机器语言，与平台无关，可以生成对应平台的可执行文件，对于iOS开发就是Mach-O文件)</li>
</ol>
<h2 id="编译时链接器做了什么"><a href="#编译时链接器做了什么" class="headerlink" title="编译时链接器做了什么"></a>编译时链接器做了什么</h2><p>将操作的数据绑定到存储地址及引用的函数符号也绑定到对应的函数地址，如果不绑定就需要在写代码时给每个指令指定需要操作的内存地址</p>
<h2 id="dyld"><a href="#dyld" class="headerlink" title="dyld"></a>dyld</h2><ol>
<li>先执行 Mach-O 文件，根据 Mach-O 文件里 undefined 的符号加载应的动态库，系统会设置一个共享缓存来解决加载的递归依赖问题；</li>
<li>加载后，将 undefined 的符号绑定到动态库里对应的地址上</li>
<li>最后再处理 +load 方法，main 函数返回后运行static terminator</li>
</ol>
<h2 id="加载动态库方法"><a href="#加载动态库方法" class="headerlink" title="加载动态库方法"></a>加载动态库方法</h2><p>dlopen,dlsym</p>
<h1 id="2019-03-26-OC代码静态分析工具"><a href="#2019-03-26-OC代码静态分析工具" class="headerlink" title="2019-03-26 OC代码静态分析工具"></a><em>2019-03-26 OC代码静态分析工具</em></h1><h2 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h2><ul>
<li><strong>oclint</strong></li>
<li><strong>clang静态分析器</strong></li>
<li><strong>infer(推荐使用)</strong></li>
</ul>
<h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p>检查语法错误，性能检测，优化代码建议,内存泄漏</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这三款工具都是基于<strong>clang(c,c++,oc编译器)</strong>开发的,提供了底层的核心功能<br><a href="https://www.jianshu.com/p/1367dad95445" target="_blank" rel="noopener">LLVM知识补充</a><br><a href="https://www.jianshu.com/p/7c894f9b7b02" target="_blank" rel="noopener">swift编译器结构分析</a></p>
<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>实用的技术文章总结</title>
    <url>/2019/03/15/%E5%AE%9E%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>整理记录平时工作中搜索到一些经典技术文章和且不限于博客等等</p>
<a id="more"></a>

<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a><strong>Android</strong></h1><h2 id="WebView与-JS-交互方式"><a href="#WebView与-JS-交互方式" class="headerlink" title="WebView与 JS 交互方式"></a><em><a href="https://blog.csdn.net/carson_ho/article/details/64904691" target="_blank" rel="noopener">WebView与 JS 交互方式</a></em></h2><h2 id="全面屏适配"><a href="#全面屏适配" class="headerlink" title="全面屏适配"></a><em><a href="https://www.jianshu.com/p/c9e710a9fa35" target="_blank" rel="noopener">全面屏适配</a></em></h2><h2 id="OKHttp3源码解析"><a href="#OKHttp3源码解析" class="headerlink" title="OKHttp3源码解析"></a><em><a href="https://blog.csdn.net/acaixuediannao/article/details/87698195" target="_blank" rel="noopener">OKHttp3源码解析</a></em></h2><h2 id="单Activity-＋-多Fragment"><a href="#单Activity-＋-多Fragment" class="headerlink" title="单Activity ＋ 多Fragment"></a><strong><a href="https://github.com/YoKeyword/Fragmentation" target="_blank" rel="noopener">单Activity ＋ 多Fragment</a></strong></h2><h2 id="Fragment详细讲解"><a href="#Fragment详细讲解" class="headerlink" title="Fragment详细讲解"></a><strong><a href="https://www.jianshu.com/p/fd71d65f0ec6" target="_blank" rel="noopener">Fragment详细讲解</a></strong></h2><h2 id="Fragment详解2"><a href="#Fragment详解2" class="headerlink" title="Fragment详解2"></a><strong><a href="https://juejin.im/post/5cadbe046fb9a068ad1b0578" target="_blank" rel="noopener">Fragment详解2</a></strong></h2><h2 id="View绘制"><a href="#View绘制" class="headerlink" title="View绘制"></a><strong><a href="https://juejin.im/post/5c9adb5ff265da60c76ceb1c" target="_blank" rel="noopener">View绘制</a></strong></h2><h2 id="ARoute"><a href="#ARoute" class="headerlink" title="ARoute"></a><strong><a href="https://www.jianshu.com/p/6021f3f61fa6" target="_blank" rel="noopener">ARoute</a></strong></h2><h2 id="组件化和插件化区别"><a href="#组件化和插件化区别" class="headerlink" title="组件化和插件化区别"></a><strong><a href="https://blog.csdn.net/fepengwang/article/details/80533301" target="_blank" rel="noopener">组件化和插件化区别</a></strong></h2><h2 id="四大启动模式"><a href="#四大启动模式" class="headerlink" title="四大启动模式"></a><strong><a href="https://blog.csdn.net/liyi1009365545/article/details/81455520" target="_blank" rel="noopener">四大启动模式</a></strong></h2><h2 id="一系列Android进阶文章。持续更新中"><a href="#一系列Android进阶文章。持续更新中" class="headerlink" title="一系列Android进阶文章。持续更新中"></a><strong><a href="https://github.com/SusionSuc/AdvancedAndroid" target="_blank" rel="noopener">一系列Android进阶文章。持续更新中</a></strong></h2><h2 id="AMSHook"><a href="#AMSHook" class="headerlink" title="AMSHook"></a><strong><a href="https://github.com/androidmalin/AMSHook" target="_blank" rel="noopener">AMSHook</a></strong></h2><h2 id="玩Android"><a href="#玩Android" class="headerlink" title="玩Android"></a><strong><a href="https://www.wanandroid.com/" target="_blank" rel="noopener">玩Android</a></strong></h2><h2 id="zygote解析"><a href="#zygote解析" class="headerlink" title="zygote解析"></a><strong><a href="https://blog.csdn.net/XuJiaoJie/article/details/78890908" target="_blank" rel="noopener">zygote解析</a></strong></h2><h2 id="service详解"><a href="#service详解" class="headerlink" title="service详解"></a><strong><a href="https://www.cnblogs.com/smyhvae/p/4070518.html" target="_blank" rel="noopener">service详解</a></strong></h2><h2 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a><strong><a href="https://www.cnblogs.com/qianguyihao/p/4802274.html" target="_blank" rel="noopener">事件详解</a></strong></h2><h2 id="Android组件化详细讲解"><a href="#Android组件化详细讲解" class="headerlink" title="Android组件化详细讲解"></a><strong><a href="https://blog.csdn.net/guiying712/article/details/55213884" target="_blank" rel="noopener">Android组件化详细讲解</a></strong></h2><h2 id="多渠道打包一"><a href="#多渠道打包一" class="headerlink" title="多渠道打包一"></a><strong><a href="https://blog.csdn.net/fangziyi199110/article/details/73469388" target="_blank" rel="noopener">多渠道打包一</a></strong></h2><h2 id="多渠道打包二"><a href="#多渠道打包二" class="headerlink" title="多渠道打包二"></a><strong><a href="https://blog.csdn.net/qq_36674248/article/details/83751293" target="_blank" rel="noopener">多渠道打包二</a></strong></h2><h2 id="多渠道打包三"><a href="#多渠道打包三" class="headerlink" title="多渠道打包三"></a><strong><a href="https://juejin.im/post/5cdbf5e3e51d45473d10ff11" target="_blank" rel="noopener">多渠道打包三</a></strong></h2><h2 id="JVM1"><a href="#JVM1" class="headerlink" title="JVM1"></a><strong><a href="https://www.jianshu.com/p/0e5878429081" target="_blank" rel="noopener">JVM1</a></strong></h2><h2 id="JVM2"><a href="#JVM2" class="headerlink" title="JVM2"></a><strong><a href="https://www.jianshu.com/p/c9f2143a1b3b" target="_blank" rel="noopener">JVM2</a></strong></h2><h2 id="kotlin"><a href="#kotlin" class="headerlink" title="kotlin"></a><strong><a href="https://www.lixiaojun.xin/static/courses/kotlin/" target="_blank" rel="noopener">kotlin</a></strong></h2><h2 id="Kotlin-类继承讲解"><a href="#Kotlin-类继承讲解" class="headerlink" title="Kotlin 类继承讲解"></a><strong><a href="https://blog.csdn.net/guolin_blog/article/details/89765754" target="_blank" rel="noopener">Kotlin 类继承讲解</a></strong></h2><h2 id="LitePal详细用法"><a href="#LitePal详细用法" class="headerlink" title="LitePal详细用法"></a><strong><a href="https://www.jianshu.com/p/bc68e763c7a2" target="_blank" rel="noopener">LitePal详细用法</a></strong></h2><h2 id="线程的使用都在这里了"><a href="#线程的使用都在这里了" class="headerlink" title="线程的使用都在这里了"></a><strong><a href="https://juejin.im/entry/5ce49f51f265da1bc64b9813?utm_source=gold_browser_extension" target="_blank" rel="noopener">线程的使用都在这里了</a></strong></h2><h2 id="webview详解"><a href="#webview详解" class="headerlink" title="webview详解"></a><strong><a href="https://juejin.im/post/5cff8c27f265da1bae38f1c1?utm_source=gold_browser_extension" target="_blank" rel="noopener">webview详解</a></strong></h2><h2 id="物联网-系列教程"><a href="#物联网-系列教程" class="headerlink" title="物联网 系列教程"></a><a href="http://www.dajipai.cc/archives/ead4653c.html" target="_blank" rel="noopener">物联网 系列教程</a></h2><hr>
<h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a><strong>iOS</strong></h1><h2 id="OC代码规范"><a href="#OC代码规范" class="headerlink" title="OC代码规范"></a><em><a href="https://github.com/NYTimes/objective-c-style-guide/blob/master/README_zh-Hans.md" target="_blank" rel="noopener">OC代码规范</a></em></h2><h2 id="framework制作"><a href="#framework制作" class="headerlink" title="framework制作"></a><em><a href="https://blog.csdn.net/glt_code/article/details/53539430" target="_blank" rel="noopener">framework制作</a></em></h2><h2 id="私有pod组件化"><a href="#私有pod组件化" class="headerlink" title="私有pod组件化"></a><em><a href="https://www.jianshu.com/p/40ace82bdc29" target="_blank" rel="noopener">私有pod组件化</a></em></h2><p><a href="https://www.jianshu.com/p/56d7c21a65f5" target="_blank" rel="noopener">下篇请点这里</a></p>
<h2 id="SwiftTips"><a href="#SwiftTips" class="headerlink" title="SwiftTips"></a><em><a href="https://github.com/JohnSundell/SwiftTips" target="_blank" rel="noopener">SwiftTips</a></em></h2><h2 id="细说GCD（Grand-Central-Dispatch）如何用"><a href="#细说GCD（Grand-Central-Dispatch）如何用" class="headerlink" title="细说GCD（Grand Central Dispatch）如何用"></a><strong><a href="https://github.com/ming1016/study/wiki/%E7%BB%86%E8%AF%B4GCD%EF%BC%88Grand-Central-Dispatch%EF%BC%89%E5%A6%82%E4%BD%95%E7%94%A8" target="_blank" rel="noopener">细说GCD（Grand Central Dispatch）如何用</a></strong></h2><h2 id="iOS组件化"><a href="#iOS组件化" class="headerlink" title="iOS组件化"></a><strong><a href="https://www.jianshu.com/p/f472fa9f0616" target="_blank" rel="noopener">iOS组件化</a></strong></h2><h2 id="iOSAudio"><a href="#iOSAudio" class="headerlink" title="iOSAudio"></a><strong><a href="https://juejin.im/post/5cd053b051882541332f5bdb?utm_source=gold_browser_extension" target="_blank" rel="noopener">iOSAudio</a></strong></h2><h2 id="JHBlog"><a href="#JHBlog" class="headerlink" title="JHBlog"></a><strong><a href="https://github.com/SunshineBrother/JHBlog" target="_blank" rel="noopener">JHBlog</a></strong></h2><h2 id="iOS-编译详解-LLVM-Clang"><a href="#iOS-编译详解-LLVM-Clang" class="headerlink" title="iOS 编译详解 LLVM Clang"></a><strong><a href="https://juejin.im/post/5cdaab1cf265da03761ead47?utm_source=gold_browser_extension" target="_blank" rel="noopener">iOS 编译详解 LLVM Clang</a></strong></h2><h2 id="Runloop详解"><a href="#Runloop详解" class="headerlink" title="Runloop详解"></a><strong><a href="https://juejin.im/post/5cd98080e51d454759351d6e?utm_source=gold_browser_extension" target="_blank" rel="noopener">Runloop详解</a></strong></h2><h2 id="Alamofire源码解析"><a href="#Alamofire源码解析" class="headerlink" title="Alamofire源码解析****"></a><strong><a href="https://www.cnblogs.com/ludashi/p/5588044.html" target="_blank" rel="noopener">Alamofire源码解析</a>****</strong></h2><h2 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a><strong><a href="https://jinxiansen.github.io/SwiftUI/README_CN.html" target="_blank" rel="noopener">SwiftUI</a></strong></h2><hr>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h1><h2 id="免费的计算机编程类中文书籍"><a href="#免费的计算机编程类中文书籍" class="headerlink" title="免费的计算机编程类中文书籍"></a><em><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="noopener">免费的计算机编程类中文书籍</a></em></h2><h2 id="十大经典算法动画演示"><a href="#十大经典算法动画演示" class="headerlink" title="十大经典算法动画演示"></a><em><a href="https://mp.weixin.qq.com/s/vn3KiV-ez79FmbZ36SX9lg" target="_blank" rel="noopener">十大经典算法动画演示</a></em></h2><h2 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a><em><a href="https://juejin.im/post/5c8756e6e51d456cda2e7ff1" target="_blank" rel="noopener">23种设计模式</a></em></h2><h2 id="webpack4配置指南"><a href="#webpack4配置指南" class="headerlink" title="webpack4配置指南"></a><strong><a href="https://github.com/ProtoTeam/blog/blob/master/201806/3.md" target="_blank" rel="noopener">webpack4配置指南</a></strong></h2><h2 id="零基础web学习"><a href="#零基础web学习" class="headerlink" title="零基础web学习"></a><strong><a href="https://github.com/qianguyihao/web" target="_blank" rel="noopener">零基础web学习</a></strong></h2><h2 id="面向对象6大设计原则iOS"><a href="#面向对象6大设计原则iOS" class="headerlink" title="面向对象6大设计原则iOS"></a><strong><a href="http://www.cocoachina.com/ios/20180914/24916.html" target="_blank" rel="noopener">面向对象6大设计原则iOS</a></strong></h2><h2 id="面向对象6大设计原则Java"><a href="#面向对象6大设计原则Java" class="headerlink" title="面向对象6大设计原则Java"></a><strong><a href="https://blog.csdn.net/petterp/article/details/88053378" target="_blank" rel="noopener">面向对象6大设计原则Java</a></strong></h2><h2 id="面向对象原则及设计模式"><a href="#面向对象原则及设计模式" class="headerlink" title="面向对象原则及设计模式"></a><strong><a href="https://github.com/knightsj/object-oriented-design" target="_blank" rel="noopener">面向对象原则及设计模式</a></strong></h2><h2 id="Python-100-Days"><a href="#Python-100-Days" class="headerlink" title="Python-100-Days"></a><strong><a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python-100-Days</a></strong></h2><script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>技术</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>平时开发会用到的开源库及学习整理</title>
    <url>/2019/03/14/Android-%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E5%BA%93/</url>
    <content><![CDATA[<p><figure class="banner" style="width:undefinedpx; height:undefinedpx;margin: 0 auto;">
      <img src="/medium-image-plugin/thumbnailsundefined" alt="读书" class="img-small" data-large="/imgundefined">
      </figure><br>记录平时开发中常用的一些Android，iOS开源库及面试的一些问题</p>
<a id="more"></a>
<h1 id="Android开发"><a href="#Android开发" class="headerlink" title="Android开发"></a><strong>Android开发</strong></h1><h2 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a><em>Widget</em></h2><h3 id="地址选择器"><a href="#地址选择器" class="headerlink" title="地址选择器"></a><a href="https://github.com/crazyandcoder/citypicker" target="_blank" rel="noopener">地址选择器</a></h3><h3 id="授权登陆"><a href="#授权登陆" class="headerlink" title="授权登陆"></a><a href="https://github.com/justauth/JustAuth" target="_blank" rel="noopener">授权登陆</a></h3><h3 id="AndroidUtilCode"><a href="#AndroidUtilCode" class="headerlink" title="AndroidUtilCode"></a><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="noopener">AndroidUtilCode</a></h3><p>工具类神器</p>
<h3 id="BaseRecyclerViewAdapterHelper"><a href="#BaseRecyclerViewAdapterHelper" class="headerlink" title="BaseRecyclerViewAdapterHelper"></a><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="noopener">BaseRecyclerViewAdapterHelper</a></h3><p>BRVAH是一个强大的RecyclerAdapter框架，它能节约开发者大量的开发时间，集成了大部分列表常用需求解决方案。</p>
<h3 id="BGABanner-Android"><a href="#BGABanner-Android" class="headerlink" title="BGABanner-Android"></a><a href="https://github.com/bingoogolapple/BGABanner-Android" target="_blank" rel="noopener">BGABanner-Android</a></h3><p>引导界面滑动导航 + 大于等于1页时无限轮播 + 各种切换动画轮播效果</p>
<h3 id="PickerView"><a href="#PickerView" class="headerlink" title="PickerView"></a><a href="https://github.com/Bigkoo/Android-PickerView" target="_blank" rel="noopener">PickerView</a></h3><p>时间选择器、省市区三级联动</p>
<h3 id="SmartRefreshLayout"><a href="#SmartRefreshLayout" class="headerlink" title="SmartRefreshLayout"></a><a href="https://github.com/scwang90/SmartRefreshLayout" target="_blank" rel="noopener">SmartRefreshLayout</a></h3><p>下拉刷新、上拉加载、二级刷新、淘宝二楼、RefreshLayout、OverScroll，Android智能下拉刷新框架，支持越界回弹、越界拖动，具有极强的扩展性，集成了几十种炫酷的Header和 Footer。</p>
<h3 id="Android-PickerView"><a href="#Android-PickerView" class="headerlink" title="Android-PickerView"></a><a href="https://github.com/Bigkoo/Android-PickerView" target="_blank" rel="noopener">Android-PickerView</a></h3><p>时间选择器、省市区三级联动</p>
<h3 id="MagicIndicator"><a href="#MagicIndicator" class="headerlink" title="MagicIndicator"></a><a href="https://github.com/hackware1993/MagicIndicator" target="_blank" rel="noopener">MagicIndicator</a></h3><p>强大、可定制、易扩展的 ViewPager 指示器框架。是ViewPagerIndicator、TabLayout、PagerSlidingTabStrip的最佳替代品。支持角标，更支持在非ViewPager场景下使用（使用hide()、show()切换Fragment或使用setVisibility切换FrameLayout里的.</p>
<h3 id="FlycoTabLayout"><a href="#FlycoTabLayout" class="headerlink" title="FlycoTabLayout"></a><a href="https://github.com/H07000223/FlycoTabLayout" target="_blank" rel="noopener">FlycoTabLayout</a></h3><p>tablayout</p>
<h3 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a><a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide</a></h3><p>网络图片加载神器</p>
<h3 id="NumberProgressBar"><a href="#NumberProgressBar" class="headerlink" title="NumberProgressBar"></a><a href="https://github.com/daimajia/NumberProgressBar" target="_blank" rel="noopener">NumberProgressBar</a></h3><p>数字进度条</p>
<h3 id="CoordinatorTabLayout"><a href="#CoordinatorTabLayout" class="headerlink" title="CoordinatorTabLayout"></a><a href="https://github.com/hugeterry/CoordinatorTabLayout" target="_blank" rel="noopener">CoordinatorTabLayout</a></h3><p>CoordinatorTabLayout是一个自定义组合控件,可快速实现TabLayout与CoordinatorLayout相结合的样式 继承至CoordinatorLayout, 在该组件下面使用了CollapsingToolbarLayout包含TabLayout</p>
<h3 id="MPAndroidChart"><a href="#MPAndroidChart" class="headerlink" title="MPAndroidChart"></a><a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="noopener">MPAndroidChart</a></h3><p>图表</p>
<h3 id="GlideImageView"><a href="#GlideImageView" class="headerlink" title="GlideImageView"></a><a href="https://github.com/sunfusheng/GlideImageView" target="_blank" rel="noopener">GlideImageView</a></h3><p>基于Glide V4.8.0封装的图片加载库，可以监听加载图片时的进度</p>
<h3 id="RoundedImageView"><a href="#RoundedImageView" class="headerlink" title="RoundedImageView"></a><a href="https://github.com/vinc3m1/RoundedImageView" target="_blank" rel="noopener">RoundedImageView</a></h3><p>圆角图片控件</p>
<h3 id="Matisse"><a href="#Matisse" class="headerlink" title="Matisse"></a><a href="https://github.com/zhihu/Matisse" target="_blank" rel="noopener">Matisse</a></h3><p>知乎开源的图片选择器</p>
<h3 id="TakePhoto"><a href="#TakePhoto" class="headerlink" title="TakePhoto"></a><a href="https://github.com/crazycodeboy/TakePhoto" target="_blank" rel="noopener">TakePhoto</a></h3><p>一款用于在Android设备上获取照片（拍照或从相册、文件中选择）、裁剪图片、压缩图片的开源工具库</p>
<h3 id="PhotoView"><a href="#PhotoView" class="headerlink" title="PhotoView"></a><a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="noopener">PhotoView</a></h3><p>通过各种触摸手势实现支持缩放功能的ImageView</p>
<h3 id="GSYVideoPlayer"><a href="#GSYVideoPlayer" class="headerlink" title="GSYVideoPlayer"></a><a href="https://github.com/CarGuo/GSYVideoPlayer" target="_blank" rel="noopener">GSYVideoPlayer</a></h3><p>视频播放</p>
<h3 id="XCodeScanner"><a href="#XCodeScanner" class="headerlink" title="XCodeScanner"></a><a href="https://github.com/Simon-Leeeeeeeee/XCodeScanner" target="_blank" rel="noopener">XCodeScanner</a></h3><p>一个Android平台更快更简单更精准的条形码及二维码解析框架。采用ZBar解析图像数据，兼容Android4.0 (API14)及以上版本。<a href="https://www.jianshu.com/p/65df16604646?from=singlemessage" target="_blank" rel="noopener">教程</a></p>
<h3 id="SmoothCheckBox"><a href="#SmoothCheckBox" class="headerlink" title="SmoothCheckBox"></a><a href="https://github.com/andyxialm/SmoothCheckBox" target="_blank" rel="noopener">SmoothCheckBox</a></h3><p>选择框</p>
<h3 id="CameraView"><a href="#CameraView" class="headerlink" title="CameraView"></a><a href="https://github.com/CJT2325/CameraView" target="_blank" rel="noopener">CameraView</a></h3><p>仿微信拍照Android控件（轻触拍照，长按摄像）</p>
<h3 id="MultiType"><a href="#MultiType" class="headerlink" title="MultiType"></a><a href="https://github.com/drakeet/MultiType" target="_blank" rel="noopener">MultiType</a></h3><p>MultiType 就是一个多类型列表视图的中间分发框架，它能帮助你快速并且清晰地开发一些复杂的列表页面。它本是为聊天页面开发的，聊天页面的消息类型也是有大量不同种类，并且新增频繁，而 MultiType 能够轻松胜任，代码模块化，随时可拓展新的类型进入列表当中。它内建了 类型 - View 的复用池系统，支持 RecyclerView，使用简单灵活，令代码清晰、拥抱变化。</p>
<h3 id="Banner"><a href="#Banner" class="headerlink" title="Banner"></a><a href="https://github.com/youth5201314/banner" target="_blank" rel="noopener">Banner</a></h3><p>滚动banner</p>
<h3 id="NiceDialog"><a href="#NiceDialog" class="headerlink" title="NiceDialog"></a><a href="https://github.com/SheHuan/NiceDialog" target="_blank" rel="noopener">NiceDialog</a></h3><p>自定义dialog</p>
<h3 id="MarqueeView"><a href="#MarqueeView" class="headerlink" title="MarqueeView"></a><a href="https://github.com/385841539/MarqueeView" target="_blank" rel="noopener">MarqueeView</a></h3><p>-跑马灯效果</p>
<h3 id="YSocialApi"><a href="#YSocialApi" class="headerlink" title="YSocialApi"></a><a href="https://github.com/apiosource/YSocialApi" target="_blank" rel="noopener">YSocialApi</a></h3><p>分享，支付，三方登陆</p>
<h3 id="EnFloatingView"><a href="#EnFloatingView" class="headerlink" title="EnFloatingView"></a><a href="https://github.com/leotyndale/EnFloatingView" target="_blank" rel="noopener">EnFloatingView</a></h3><p>悬浮插件</p>
<h3 id="AutoScrollLayout"><a href="#AutoScrollLayout" class="headerlink" title="AutoScrollLayout"></a><a href="https://github.com/leiyun1993/AutoScrollLayout" target="_blank" rel="noopener">AutoScrollLayout</a></h3><p>仿淘宝首页热点新闻滚动，类中奖滚动，自动滚动文字、View、跑马灯</p>
<h3 id="SuperWeb"><a href="#SuperWeb" class="headerlink" title="SuperWeb"></a><a href="https://github.com/Victory-Over/SuperWeb" target="_blank" rel="noopener">SuperWeb</a></h3><p>Android基于腾讯X5内核的WebView(超级浏览器)，拥有文件上传、下载、浏览（支持PDF/PPT/DOC/EXCEL/TXT格式）、Android与JS的交互、视频播放、自定义进度条、下拉回弹等功能</p>
<h3 id="ImagePicker"><a href="#ImagePicker" class="headerlink" title="ImagePicker"></a><a href="https://github.com/Lichenwei-Dev/ImagePicker" target="_blank" rel="noopener">ImagePicker</a></h3><p>防微信图片选择器</p>
<h3 id="Blurry"><a href="#Blurry" class="headerlink" title="Blurry"></a><a href="https://github.com/wasabeef/Blurry" target="_blank" rel="noopener">Blurry</a></h3><p>图片模糊处理</p>
<h3 id="XPopup"><a href="#XPopup" class="headerlink" title="XPopup"></a><a href="https://github.com/li-xiaojun/XPopup" target="_blank" rel="noopener">XPopup</a></h3><p>万能的弹框开源库</p>
<h3 id="TagView"><a href="#TagView" class="headerlink" title="TagView"></a><a href="https://github.com/mahimrocky/TagView" target="_blank" rel="noopener">TagView</a></h3><p>编辑tags</p>
<h3 id="KAlertDialog"><a href="#KAlertDialog" class="headerlink" title="KAlertDialog"></a><a href="https://github.com/TutorialsAndroid/KAlertDialog" target="_blank" rel="noopener">KAlertDialog</a></h3><p>sweetAlertDialog</p>
<h3 id="GuideView"><a href="#GuideView" class="headerlink" title="GuideView"></a><a href="https://github.com/llxdaxia/GuideView" target="_blank" rel="noopener">GuideView</a></h3><p>操作帮助引导页</p>
<h3 id="SmartRefreshLayout-1"><a href="#SmartRefreshLayout-1" class="headerlink" title="SmartRefreshLayout"></a><a href="https://github.com/scwang90/SmartRefreshLayout" target="_blank" rel="noopener">SmartRefreshLayout</a></h3><p>下拉刷新、上拉加载、二级刷新、淘宝二楼、RefreshLayout、OverScroll，Android智能下拉刷新框架，支持越界回弹、越界拖动，具有极强的扩展性，集成了几十种炫酷的Header和 Footer</p>
<h3 id="Pickerview"><a href="#Pickerview" class="headerlink" title="Pickerview"></a><a href="https://github.com/jaaksi/pickerview" target="_blank" rel="noopener">Pickerview</a></h3><p>One very very user-friendly Picker library（内部提供两种常用类型的Picker：时间选择器（支持聚合）和联动选择器（支持不联动）。支持扩展自定义Picker。）</p>
<h3 id="UpdatePlugin"><a href="#UpdatePlugin" class="headerlink" title="UpdatePlugin"></a><a href="https://github.com/yjfnypeu/UpdatePlugin" target="_blank" rel="noopener">UpdatePlugin</a></h3><p>可以任意定制的更新组件</p>
<h3 id="MPAndroidChart-1"><a href="#MPAndroidChart-1" class="headerlink" title="MPAndroidChart"></a><a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="noopener">MPAndroidChart</a></h3><p>功能十分强大的chart库</p>
<h3 id="SwipeRecyclerView"><a href="#SwipeRecyclerView" class="headerlink" title="SwipeRecyclerView"></a><a href="https://github.com/yanzhenjie/SwipeRecyclerView" target="_blank" rel="noopener">SwipeRecyclerView</a></h3><p>RecyclerView侧滑菜单，Item拖拽，滑动删除Item，自动加载更多，HeaderView，FooterView，Item分组黏贴。</p>
<h3 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a><a href="https://lottiefiles.com/featured" target="_blank" rel="noopener">Lottie</a></h3><p>用json文件实现复杂动画</p>
<h3 id="aurora-imui"><a href="#aurora-imui" class="headerlink" title="aurora-imui"></a><a href="https://github.com/jpush/aurora-imui" target="_blank" rel="noopener">aurora-imui</a></h3><p>定制聊天界面</p>
<h3 id="CameraVideoButton"><a href="#CameraVideoButton" class="headerlink" title="CameraVideoButton"></a><a href="https://github.com/iammert/CameraVideoButton" target="_blank" rel="noopener">CameraVideoButton</a></h3><p>录制视频button === only view</p>
<h3 id="ExpandableLayout"><a href="#ExpandableLayout" class="headerlink" title="ExpandableLayout"></a><a href="https://github.com/iammert/ExpandableLayout" target="_blank" rel="noopener">ExpandableLayout</a></h3><p>Expandable LinearLayout</p>
<h3 id="Android-skin-support"><a href="#Android-skin-support" class="headerlink" title="Android-skin-support"></a><a href="https://github.com/ximsfei/Android-skin-support" target="_blank" rel="noopener">Android-skin-support</a></h3><p>Android换肤</p>
<h3 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a><a href="https://github.com/nex3z/FlowLayout" target="_blank" rel="noopener">FlowLayout</a></h3><p>标签流</p>
<h3 id="Android-TV-Libs"><a href="#Android-TV-Libs" class="headerlink" title="Android_TV_Libs"></a><a href="https://gitee.com/kumei/Android_tv_libs" target="_blank" rel="noopener">Android_TV_Libs</a></h3><p>AndroidTV 库</p>
<h3 id="Linkage-RecyclerView"><a href="#Linkage-RecyclerView" class="headerlink" title="Linkage-RecyclerView"></a><a href="https://github.com/KunMinX/Linkage-RecyclerView" target="_blank" rel="noopener">Linkage-RecyclerView</a></h3><p>一行代码即可接入，二级联动订餐列表 - RecyclerView + AndroidX</p>
<h3 id="SlidableLayout"><a href="#SlidableLayout" class="headerlink" title="SlidableLayout"></a><a href="https://github.com/YvesCheung/SlidableLayout" target="_blank" rel="noopener">SlidableLayout</a></h3><p>通用、易用和流畅的上下滑动翻页布局。</p>
<h3 id="QRefreshLayout"><a href="#QRefreshLayout" class="headerlink" title="QRefreshLayout"></a><a href="https://github.com/zhangxq/QRefreshLayout" target="_blank" rel="noopener">QRefreshLayout</a></h3><p>下拉刷新，上拉加载更多，自动加载更多，用法同SwipeRefreshLayout，兼容所有view，兼容nested滚动，可以自定义header footer，支持下拉到二楼</p>
<h3 id="SlideView"><a href="#SlideView" class="headerlink" title="SlideView"></a><a href="https://github.com/crekerliqiang/SlideView" target="_blank" rel="noopener">SlideView</a></h3><p>滑动删除</p>
<h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a><em>效率</em></h2><h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">EventBus</a></h3><p>事件总线</p>
<h3 id="BaseCore"><a href="#BaseCore" class="headerlink" title="BaseCore"></a><a href="https://github.com/vivitale/BaseCore" target="_blank" rel="noopener">BaseCore</a></h3><p>小白快速开发工具库</p>
<h3 id="Butterknife"><a href="#Butterknife" class="headerlink" title="Butterknife"></a><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">Butterknife</a></h3><p>注解神器</p>
<h3 id="RxAndroid"><a href="#RxAndroid" class="headerlink" title="RxAndroid"></a><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="noopener">RxAndroid</a></h3><p>RxJava bindings for Android</p>
<h3 id="Luban"><a href="#Luban" class="headerlink" title="Luban"></a><a href="https://github.com/Curzibn/Luban" target="_blank" rel="noopener">Luban</a></h3><p>图片压缩</p>
<h3 id="uCrop"><a href="#uCrop" class="headerlink" title="uCrop"></a><a href="https://github.com/Yalantis/uCrop" target="_blank" rel="noopener">uCrop</a></h3><p>图片裁剪</p>
<h3 id="RxPermissions"><a href="#RxPermissions" class="headerlink" title="RxPermissions"></a><a href="https://github.com/tbruyelle/RxPermissions" target="_blank" rel="noopener">RxPermissions</a></h3><p>基于Rx封装的权限管理</p>
<h3 id="KLog"><a href="#KLog" class="headerlink" title="KLog"></a><a href="https://github.com/ZhaoKaiQiang/KLog" target="_blank" rel="noopener">KLog</a></h3><p>日志打印<br><a href="https://blog.csdn.net/zhaokaiqiang1992/article/details/49837627" target="_blank" rel="noopener">具体使用</a></p>
<h3 id="Orhanobut"><a href="#Orhanobut" class="headerlink" title="Orhanobut"></a><a href="https://github.com/orhanobut/logger" target="_blank" rel="noopener">Orhanobut</a></h3><p>logger日志打印</p>
<h3 id="Kotlin-log"><a href="#Kotlin-log" class="headerlink" title="Kotlin-log"></a><a href="https://github.com/fengzhizi715/SAF-Kotlin-log" target="_blank" rel="noopener">Kotlin-log</a></h3><p>Kotlin-日志打印库</p>
<h3 id="baseAdapter"><a href="#baseAdapter" class="headerlink" title="baseAdapter"></a><a href="https://github.com/hongyangAndroid/baseAdapter" target="_blank" rel="noopener">baseAdapter</a></h3><p>Android 万能的Adapter for ListView,RecyclerView,GridView等，支持多种Item类型的情况。</p>
<h3 id="EasyPay"><a href="#EasyPay" class="headerlink" title="EasyPay"></a><a href="https://github.com/kingofglory/EasyPay" target="_blank" rel="noopener">EasyPay</a></h3><p>Android平台的微信支付，支付宝支付以银联支付。封装</p>
<h3 id="KeepLive"><a href="#KeepLive" class="headerlink" title="KeepLive"></a><a href="https://github.com/guofudong/KeepLive" target="_blank" rel="noopener">KeepLive</a></h3><p>不强杀，一直保活</p>
<h3 id="DownloadInstaller"><a href="#DownloadInstaller" class="headerlink" title="DownloadInstaller"></a><a href="https://github.com/AnyLifeZLB/DownloadInstaller" target="_blank" rel="noopener">DownloadInstaller</a></h3><p>Android App应用内下载，储存，安装 ，未知来源等问题处理</p>
<h3 id="FpShadowLayout"><a href="#FpShadowLayout" class="headerlink" title="FpShadowLayout"></a><a href="https://github.com/maxiaoyi/FpShadowLayout" target="_blank" rel="noopener">FpShadowLayout</a></h3><p>自定义viewGroup，给view加上阴影效果。支持单边阴影，多边阴影，圆角矩形阴影。</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a><em>网络</em></h2><h3 id="okhttp-OkGo"><a href="#okhttp-OkGo" class="headerlink" title="okhttp-OkGo"></a><a href="https://github.com/jeasonlzy/okhttp-OkGo" target="_blank" rel="noopener">okhttp-OkGo</a></h3><h3 id="DaemonService"><a href="#DaemonService" class="headerlink" title="DaemonService"></a><a href="https://github.com/sunfusheng/DaemonService" target="_blank" rel="noopener">DaemonService</a></h3><p>❤️跳保活 Android端心跳服务与进程保活</p>
<h3 id="Aria"><a href="#Aria" class="headerlink" title="Aria"></a><a href="https://github.com/AriaLyy/Aria" target="_blank" rel="noopener">Aria</a></h3><p>FTP,HTTP断点续传<a href="https://aria.laoyuyu.me/aria_doc/download/ftps.html" target="_blank" rel="noopener">see</a></p>
<h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a><em>开源</em></h2><h3 id="NiceMusic"><a href="#NiceMusic" class="headerlink" title="NiceMusic"></a><a href="https://github.com/EspoirX/NiceMusichttps://github.com/EspoirX/NiceMusic" target="_blank" rel="noopener">NiceMusic</a></h3><p>播放音频库</p>
<h3 id="FlyTour"><a href="#FlyTour" class="headerlink" title="FlyTour"></a><a href="https://github.com/geduo83/FlyTour" target="_blank" rel="noopener">FlyTour</a></h3><p>组件化，架构 混合 </p>
<h3 id="android-jetpack"><a href="#android-jetpack" class="headerlink" title="android-jetpack"></a><a href="https://github.com/zhiwei1990/android-jetpack-demo" target="_blank" rel="noopener">android-jetpack</a></h3><p>Android-jetpack</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><em>数据库</em></h2><h3 id="ormlite"><a href="#ormlite" class="headerlink" title="ormlite"></a><a href="https://github.com/j256/ormlite-android" target="_blank" rel="noopener">ormlite</a></h3><h3 id="LitePal"><a href="#LitePal" class="headerlink" title="LitePal"></a><a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="noopener">LitePal</a></h3><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a><em>动画</em></h2><h3 id="AndroidViewAnimations"><a href="#AndroidViewAnimations" class="headerlink" title="AndroidViewAnimations"></a><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="noopener">AndroidViewAnimations</a></h3><p>Android动画合集</p>
<h3 id="ViewAnimator"><a href="#ViewAnimator" class="headerlink" title="ViewAnimator"></a><a href="https://github.com/florent37/ViewAnimator" target="_blank" rel="noopener">ViewAnimator</a></h3><p>Android动画合集</p>
<h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a><em>面试</em></h2><h3 id="面试1"><a href="#面试1" class="headerlink" title="面试1"></a><a href="https://www.jianshu.com/p/c70989bd5f29" target="_blank" rel="noopener">面试1</a></h3><h3 id="面试含部分答案"><a href="#面试含部分答案" class="headerlink" title="面试含部分答案"></a><a href="https://github.com/oo1993448102/CommonDevKnowledge" target="_blank" rel="noopener">面试含部分答案</a></h3><h3 id="面试2"><a href="#面试2" class="headerlink" title="面试2"></a><a href="https://github.com/android-exchange/Android-Interview" target="_blank" rel="noopener">面试2</a></h3><h3 id="AndroidReview"><a href="#AndroidReview" class="headerlink" title="AndroidReview"></a><a href="https://github.com/huannan/AndroidReview" target="_blank" rel="noopener">AndroidReview</a></h3><p>小楠总的 Android 面试复习</p>
<h3 id="面试干货集中营"><a href="#面试干货集中营" class="headerlink" title="面试干货集中营"></a><a href="https://mp.weixin.qq.com/s/CQABJNacnsf8_s6l93JKUw" target="_blank" rel="noopener">面试干货集中营</a></h3><h3 id="面试最全整理"><a href="#面试最全整理" class="headerlink" title="面试最全整理"></a><a href="https://mp.weixin.qq.com/s/CQABJNacnsf8_s6l93JKUw" target="_blank" rel="noopener">面试最全整理</a></h3><h3 id="每日一道面试题"><a href="#每日一道面试题" class="headerlink" title="每日一道面试题"></a><a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题</a></h3><h3 id="Java-Android学习-面试指南"><a href="#Java-Android学习-面试指南" class="headerlink" title="Java Android学习/面试指南"></a><a href="https://www.wanandroid.com/blog/show/2544" target="_blank" rel="noopener">Java Android学习/面试指南</a></h3><h3 id="2019最全面试题"><a href="#2019最全面试题" class="headerlink" title="2019最全面试题"></a><a href="https://juejin.im/post/5d2eea56f265da1b7004df0d?utm_source=gold_browser_extension" target="_blank" rel="noopener">2019最全面试题</a></h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><em>其他</em></h2><h3 id="Android复习资料"><a href="#Android复习资料" class="headerlink" title="Android复习资料"></a><a href="https://juejin.im/post/5d48e9c36fb9a06af13d50f9?utm_source=gold_browser_extension" target="_blank" rel="noopener">Android复习资料</a></h3><h3 id="ScreenMatch"><a href="#ScreenMatch" class="headerlink" title="ScreenMatch"></a><a href="https://github.com/mengzhinan/ScreenMatch" target="_blank" rel="noopener">ScreenMatch</a></h3><p>Android屏幕适配方案<br><a href="https://blog.csdn.net/fesdgasdgasdg/article/details/78108169" target="_blank" rel="noopener">教程链接</a></p>
<h3 id="Cockroach"><a href="#Cockroach" class="headerlink" title="Cockroach"></a><a href="https://github.com/android-notes/Cockroach" target="_blank" rel="noopener">Cockroach</a></h3><p>打不死的小强,永不 crash 的 Android</p>
<h3 id="GoogleSerialPort"><a href="#GoogleSerialPort" class="headerlink" title="GoogleSerialPort"></a><a href="https://github.com/jzt-Tesla/GoogleSerialPort" target="_blank" rel="noopener">GoogleSerialPort</a></h3><ol>
<li>串口接收和发送数据</li>
<li><a href="https://blog.csdn.net/u010312949/article/details/80199018" target="_blank" rel="noopener">详细教程</a></li>
</ol>
<h3 id="Java学习-面试指南"><a href="#Java学习-面试指南" class="headerlink" title="Java学习+面试指南"></a><a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">Java学习+面试指南</a></h3><h3 id="MvRx"><a href="#MvRx" class="headerlink" title="MvRx"></a><a href="https://github.com/airbnb/MvRx/" target="_blank" rel="noopener">MvRx</a></h3><p><a href="https://blog.csdn.net/c10wtiybq1ye3/article/details/87887758" target="_blank" rel="noopener">详细教程点击这里</a></p>
<hr>
<hr>
<hr>
<hr>
<h1 id="iOS开发"><a href="#iOS开发" class="headerlink" title="iOS开发"></a><strong>iOS开发</strong></h1><h2 id="SwipeCellKit"><a href="#SwipeCellKit" class="headerlink" title="SwipeCellKit"></a><a href="https://github.com/SwipeCellKit/SwipeCellKit" target="_blank" rel="noopener">SwipeCellKit</a></h2><h2 id="Sica"><a href="#Sica" class="headerlink" title="Sica"></a><a href="https://github.com/cats-oss/Sica" target="_blank" rel="noopener">Sica</a></h2><p>Swift动画库</p>
<h2 id="BRPickerView"><a href="#BRPickerView" class="headerlink" title="BRPickerView"></a><a href="https://github.com/91renb/BRPickerView" target="_blank" rel="noopener">BRPickerView</a></h2><p>iOS常用的选择器组件，只需一句代码即可调用。选择器类型主要包括：日期选择器、时间选择器、地址选择器、自定义单列字符串选择器、自定义多列字符串选择器</p>
<h2 id="GKNavigationBarViewController"><a href="#GKNavigationBarViewController" class="headerlink" title="GKNavigationBarViewController"></a><a href="https://github.com/QuintGao/GKNavigationBarViewController" target="_blank" rel="noopener">GKNavigationBarViewController</a></h2><p>iOS自定义导航栏-导航栏联动</p>
<h2 id="TXScrollLabelView"><a href="#TXScrollLabelView" class="headerlink" title="TXScrollLabelView"></a><a href="https://github.com/tingxins/TXScrollLabelView" target="_blank" rel="noopener">TXScrollLabelView</a></h2><p>滚动Label</p>
<h2 id="LTScrollView"><a href="#LTScrollView" class="headerlink" title="LTScrollView"></a><a href="https://github.com/gltwy/LTScrollView" target="_blank" rel="noopener">LTScrollView</a></h2><p>嵌套scrollview</p>
<h2 id="InjectionIII"><a href="#InjectionIII" class="headerlink" title="InjectionIII"></a><a href="https://a1049145827.github.io/2018/10/17/InjectionIII%EF%BC%9AiOS%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8-%E6%89%80%E8%A7%81%E5%8D%B3%E6%89%80%E5%BE%97/" target="_blank" rel="noopener">InjectionIII</a></h2><p>iOS开发必备效率神器-所见即所得</p>
<h2 id="CYLTabBarController"><a href="#CYLTabBarController" class="headerlink" title="CYLTabBarController"></a><a href="https://github.com/ChenYilong/CYLTabBarController" target="_blank" rel="noopener">CYLTabBarController</a></h2><p>功能十分丰富的底部tabbar</p>
<h2 id="XDPagesView"><a href="#XDPagesView" class="headerlink" title="XDPagesView"></a><a href="https://github.com/Xiexingda/XDPagesView" target="_blank" rel="noopener">XDPagesView</a></h2><p>可添加header的多控制器列表（类似 饿了么，美团）</p>
<h2 id="XLForm"><a href="#XLForm" class="headerlink" title="XLForm"></a><a href="https://github.com/xmartlabs/XLForm" target="_blank" rel="noopener">XLForm</a></h2><p>表单库</p>
<h2 id="LEEAlert"><a href="#LEEAlert" class="headerlink" title="LEEAlert"></a><a href="https://github.com/lixiang1994/LEEAlert" target="_blank" rel="noopener">LEEAlert</a></h2><p>好用自定义弹框</p>
<h2 id="JHTapTextView"><a href="#JHTapTextView" class="headerlink" title="JHTapTextView"></a><a href="https://github.com/xjh093/JHTapTextView" target="_blank" rel="noopener">JHTapTextView</a></h2><p>文本点击</p>
<h2 id="LoadAnimatedDemo"><a href="#LoadAnimatedDemo" class="headerlink" title="LoadAnimatedDemo"></a><a href="https://github.com/tigerAndBull/LoadAnimatedDemo-ios" target="_blank" rel="noopener">LoadAnimatedDemo</a></h2><p>骨架屏动画</p>
<h2 id="SHSegmentedControlTableView"><a href="#SHSegmentedControlTableView" class="headerlink" title="SHSegmentedControlTableView"></a><a href="https://github.com/HatsuneMikuV/SHSegmentedControlTableView" target="_blank" rel="noopener">SHSegmentedControlTableView</a></h2><p> 类似半糖、美丽说主页与QQ音乐歌曲列表布局效果，实现不同菜单的左右滑动切换，同时支持类似tableview的顶部工具栏悬停（既可以左右滑动，又可以上下滑动）。兼容下拉刷新，上拉</p>
<h2 id="GHDropMenuDemo"><a href="#GHDropMenuDemo" class="headerlink" title="GHDropMenuDemo"></a><a href="https://github.com/shabake/GHDropMenuDemo" target="_blank" rel="noopener">GHDropMenuDemo</a></h2><p>仿京东/美团电商筛选菜单 电商筛选菜单 电商通用筛选菜单 </p>
<h2 id="awesome-ios"><a href="#awesome-ios" class="headerlink" title="awesome-ios"></a><a href="https://github.com/vsouza/awesome-ios" target="_blank" rel="noopener">awesome-ios</a></h2><p>ios开源库集合</p>
<h2 id="awesome-swift"><a href="#awesome-swift" class="headerlink" title="awesome-swift"></a><a href="https://github.com/matteocrippa/awesome-swift" target="_blank" rel="noopener">awesome-swift</a></h2><p>swift开源库合集</p>
<h2 id="SwiftLocation"><a href="#SwiftLocation" class="headerlink" title="SwiftLocation"></a><a href="https://github.com/malcommac/SwiftLocation" target="_blank" rel="noopener">SwiftLocation</a></h2><h2 id="JXCategoryView"><a href="#JXCategoryView" class="headerlink" title="JXCategoryView"></a><a href="https://github.com/pujiaxin33/JXCategoryView" target="_blank" rel="noopener">JXCategoryView</a></h2><p>所有主流APP分类切换滚动视图</p>
<h2 id="CYLTabBarController-1"><a href="#CYLTabBarController-1" class="headerlink" title="CYLTabBarController"></a><a href="https://github.com/ChenYilong/CYLTabBarController" target="_blank" rel="noopener">CYLTabBarController</a></h2><p>中国特色 TabBar】一行代码实现 Lottie 动画TabBar，支持中间带+号的TabBar样式，自带红点角标，支持动态刷新。【iOS12 &amp; iPhone XS MAX supported】</p>
<h2 id="TABAnimated"><a href="#TABAnimated" class="headerlink" title="TABAnimated"></a><a href="https://github.com/tigerAndBull/TABAnimated" target="_blank" rel="noopener">TABAnimated</a></h2><p>生骨架屏，网络加载过渡动画</p>
<h2 id="CXTextView"><a href="#CXTextView" class="headerlink" title="CXTextView"></a><a href="https://github.com/caixiang305621856/CXTextView" target="_blank" rel="noopener">CXTextView</a></h2><p>评论输入框</p>
<h2 id="XJSafeKeyboard"><a href="#XJSafeKeyboard" class="headerlink" title="XJSafeKeyboard"></a><a href="https://github.com/xjlove/XJSafeKeyboard" target="_blank" rel="noopener">XJSafeKeyboard</a></h2><p>iOS安全键盘，支持随机字母、数字、字符</p>
<h2 id="JXPageListView"><a href="#JXPageListView" class="headerlink" title="JXPageListView"></a><a href="https://github.com/pujiaxin33/JXPageListView" target="_blank" rel="noopener">JXPageListView</a></h2><p>悬浮头横向滑动</p>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a><em>其他</em></h2><h3 id="面试问题-含部分答案"><a href="#面试问题-含部分答案" class="headerlink" title="面试问题-含部分答案"></a><a href="https://github.com/liberalisman/iOS-InterviewQuestion-collection" target="_blank" rel="noopener">面试问题-含部分答案</a></h3><h3 id="iOS-Study"><a href="#iOS-Study" class="headerlink" title="iOS Study"></a><a href="https://github.com/ming1016/study" target="_blank" rel="noopener">iOS Study</a></h3><h3 id="免费开源API"><a href="#免费开源API" class="headerlink" title="免费开源API"></a><a href="https://www.jianshu.com/p/e6f072839282" target="_blank" rel="noopener">免费开源API</a></h3><h3 id="DIYCode"><a href="#DIYCode" class="headerlink" title="DIYCode"></a><a href="https://www.diycode.cc/projects" target="_blank" rel="noopener">DIYCode</a></h3><h3 id="FlutterDouBan"><a href="#FlutterDouBan" class="headerlink" title="FlutterDouBan"></a><a href="https://github.com/kaina404/FlutterDouBan" target="_blank" rel="noopener">FlutterDouBan</a></h3><h3 id="一点心得iOS-Swift-React-Native-Python"><a href="#一点心得iOS-Swift-React-Native-Python" class="headerlink" title="一点心得iOS,Swift,React Native,Python"></a><a href="https://github.com/LeoMobileDeveloper/Blogs" target="_blank" rel="noopener">一点心得iOS,Swift,React Native,Python</a></h3><h3 id="2019iOS面试基础"><a href="#2019iOS面试基础" class="headerlink" title="2019iOS面试基础"></a><a href="https://juejin.im/post/5d807d425188252139764da7?utm_source=gold_browser_extension" target="_blank" rel="noopener">2019iOS面试基础</a></h3><script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>Android</tag>
        <tag>iOS</tag>
        <tag>开源库</tag>
      </tags>
  </entry>
  <entry>
    <title>OC与C++交互</title>
    <url>/2018/11/19/OC%E4%B8%8EC-%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>最近做的一个项目使用到了别人的一个算法解析类，不过这个类是他那边用C++实现的。这就涉及到了C++与OC之间的交互了。</p>
<a id="more"></a>

<h2 id="OC调用C"><a href="#OC调用C" class="headerlink" title="OC调用C++"></a>OC调用C++</h2><p>这个比较简单,需要提的一点就是把调用类.m文件改成.mm 然后直接new被调用的类,访问属性或方法直接用”-&gt;”</p>
<h2 id="C-调用OC"><a href="#C-调用OC" class="headerlink" title="C++调用OC"></a>C++调用OC</h2><p>这个就比较麻烦一点了,需要一个OC的桥接类和一个头文件,直接上代码吧</p>
<p><strong>.h</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;OCClass-Header.h&quot;</span><br><span class="line"></span><br><span class="line">@interface OCClass : NSObject</span><br><span class="line"></span><br><span class="line">- (void)c_showRealU3D:(const char* const)str;</span><br><span class="line">- (void)c_showBettary:(const char* const)str;</span><br><span class="line"></span><br><span class="line">@property interface realU3DCall;</span><br><span class="line">@property interface bettaryCall;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p><strong>.m</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &quot;OCClass.h&quot;</span><br><span class="line">@implementation OCClass</span><br><span class="line"></span><br><span class="line">static OCClass*myOC =nil;</span><br><span class="line"></span><br><span class="line">//显示实时U3D</span><br><span class="line">void showRealTimeU3D(void* caller, const char* const parameter)&#123;</span><br><span class="line">  </span><br><span class="line">    [(__bridge id)caller c_showRealU3D:parameter];</span><br><span class="line">&#125;</span><br><span class="line">//显示电量</span><br><span class="line">void showBettary(void* caller, const char* const parameter)&#123;</span><br><span class="line">    [(__bridge id)caller c_showBettary:parameter];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(instancetype)init&#123;</span><br><span class="line">    if ([super init]) &#123;</span><br><span class="line">        </span><br><span class="line">        _realU3DCall = showRealTimeU3D;</span><br><span class="line">        _bettaryCall = showBettary;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)c_showRealU3D:(const char* const)parameter&#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;%@&quot;,[NSString stringWithUTF8String:parameter]);</span><br><span class="line">    //处理自己的逻辑</span><br><span class="line">&#125;</span><br><span class="line">- (void)c_showBettary:(const char* const)str&#123;</span><br><span class="line">    </span><br><span class="line">    //处理自己的逻辑</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)dealloc&#123;</span><br><span class="line">    NSLog(@&quot;OC Object dealloc&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p><strong>创建头文件OCClass-Header 算是定义一个接口吧</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#ifndef OCClass_Header_h</span><br><span class="line">#define OCClass_Header_h</span><br><span class="line">typedef void (*interface) (void* caller,const char* const parameter);</span><br><span class="line">#endif /* OCClass_Header_h */</span><br></pre></td></tr></table></figure>

<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>在.h中首先导入OC中创建的一个头文件OCClass-Header<br>对外声明一个变量空指针类型,比如myOC,最终初始化时就是创建的那个桥接类<br>再通过头文件里定义的interface 声明需要调用OC中的方法<br><strong>.h</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public:</span><br><span class="line">        void* myOC;</span><br><span class="line">        interface realU3DCall;</span><br><span class="line">        interface bettaryCall;</span><br><span class="line">        </span><br><span class="line">        //最终通过这个方法发起的调用</span><br><span class="line">        void callOCMethod(interface caller,const char* const parameter);</span><br></pre></td></tr></table></figure>

<p><strong>.cpp</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   调用的地方</span><br><span class="line">    callOCMethod(this-&gt;realU3DCall,&quot;string 参数&quot;);</span><br><span class="line"></span><br><span class="line">   实现的地方</span><br><span class="line">   void BleDataParser::callOCMethod(interface caller,const char* const paramter)&#123;</span><br><span class="line">    </span><br><span class="line">    caller(this-&gt;myOC,paramter);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就实现了在C++中调用OC的功能</p>
<h2 id="OC中初始化中间类"><a href="#OC中初始化中间类" class="headerlink" title="OC中初始化中间类"></a>OC中初始化中间类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">OCClass * oc = [[OCClass alloc]init];</span><br><span class="line">void* point = (__bridge void*)oc;</span><br><span class="line">//belParser C++类对象</span><br><span class="line">bleParser-&gt;myOC = point;</span><br><span class="line">bleParser-&gt;realU3DCall = oc.realU3DCall;</span><br><span class="line">bleParser-&gt;bettaryCall = oc.bettaryCall;</span><br></pre></td></tr></table></figure>

<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>由于涉及到不同语言交互,为了参数能够兼容,参数都定义为const char* const 类型<br>C++中string 转 cstring</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c_str()</span><br></pre></td></tr></table></figure>

<p>C++中unsigned char转 cstring</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：stringstream stream;</span><br><span class="line">stream &lt;&lt; power;//c++定义的unsigned char</span><br><span class="line">string powers = stream.str();</span><br><span class="line">powers.c_str()</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">to_string(value)</span><br></pre></td></tr></table></figure>

<p>OC中char*转NSString</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[NSString stringWithUTF8String:parameter]</span><br></pre></td></tr></table></figure>

<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualAPK 插件打包脚本</title>
    <url>/2018/11/02/VirtualAPK-%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>最近项目使用了didi开源的插件包框架,多个模块打包很繁琐,索性自己写了一个小脚本，如果自己使用,需要根据实际情况修改下里面涉及到路径,代码如下:</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">import os</span><br><span class="line">import multiprocessing</span><br><span class="line"></span><br><span class="line">#获取当前目录</span><br><span class="line">root = os.getcwd()</span><br><span class="line">disrs = os.listdir(root)</span><br><span class="line"></span><br><span class="line">#list = [path for path in disrs if path.__contains__(&apos;ICQueryPlugin&apos;)]</span><br><span class="line">list = [&apos;ICQueryPlugin&apos;,&apos;NoSettleICPlugin&apos;]</span><br><span class="line"></span><br><span class="line">def copyfile(s,t):</span><br><span class="line">    print(&apos;&apos;)</span><br><span class="line">    if not os.path.exists(t):</span><br><span class="line">        os.makedirs(t)</span><br><span class="line"></span><br><span class="line">    for file in os.listdir(s):</span><br><span class="line">        sfile = os.path.join(s,file)</span><br><span class="line">        tfile = os.path.join(t,file)</span><br><span class="line">        open(tfile,&apos;wb&apos;).write(open(sfile,&apos;rb&apos;).read())</span><br><span class="line">        </span><br><span class="line">        print(&apos;working end!!!!!!!!&apos;)</span><br><span class="line"></span><br><span class="line">def startwork(path):</span><br><span class="line">    os.chdir(path)</span><br><span class="line">    os.system(&apos;./gradlew clean assemblePlugin&apos;)</span><br><span class="line"></span><br><span class="line">for path in list:</span><br><span class="line">    sub = os.path.join(root,path)</span><br><span class="line">    print(sub)</span><br><span class="line">    print(&quot;开始打包:&quot;+path)</span><br><span class="line">    multiprocessing.Process(target=startwork(sub)).start()</span><br><span class="line">    apkpath = os.path.join(sub,&apos;app/build/outputs/plugin/release&apos;)</span><br><span class="line">    copyfile(apkpath,&apos;/Users/ghwang/Desktop/apk&apos;)</span><br></pre></td></tr></table></figure>

<h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><ul>
<li>cd 到插件包路径</li>
<li>python 脚本文件.py</li>
</ul>
<h2 id="Have-a-fun"><a href="#Have-a-fun" class="headerlink" title="Have a fun!"></a>Have a fun!</h2><script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Android ADB常用命令</title>
    <url>/2018/06/08/Android-ADB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>总结一下Android开发常用ADB命令</p>
<a id="more"></a>

<h2 id="启动adb服务，一般无需手动启动"><a href="#启动adb服务，一般无需手动启动" class="headerlink" title="启动adb服务，一般无需手动启动"></a>启动adb服务，一般无需手动启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure>

<h2 id="关闭adb服务"><a href="#关闭adb服务" class="headerlink" title="关闭adb服务"></a>关闭adb服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>

<h2 id="当前电脑正在连接调试的手机"><a href="#当前电脑正在连接调试的手机" class="headerlink" title="当前电脑正在连接调试的手机"></a>当前电脑正在连接调试的手机</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>

<h2 id="安装APK-只限一个设备"><a href="#安装APK-只限一个设备" class="headerlink" title="安装APK,只限一个设备"></a>安装APK,只限一个设备</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb install apk路径</span><br></pre></td></tr></table></figure>

<h2 id="卸载APK-只限一个设备"><a href="#卸载APK-只限一个设备" class="headerlink" title="卸载APK,只限一个设备"></a>卸载APK,只限一个设备</h2> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb uninstall apk路径</span><br></pre></td></tr></table></figure>

<h2 id="adb-s-设备编号-install-apk的路径"><a href="#adb-s-设备编号-install-apk的路径" class="headerlink" title="adb -s 设备编号 install apk的路径"></a>adb -s 设备编号 install apk的路径</h2><h2 id="adb-s-设备编号-uninstall-apk的路径"><a href="#adb-s-设备编号-uninstall-apk的路径" class="headerlink" title="adb -s 设备编号 uninstall apk的路径"></a>adb -s 设备编号 uninstall apk的路径</h2><h2 id="进入当前设备shell环境-然后ls查看当前设备目录-exit退出当前shell环境"><a href="#进入当前设备shell环境-然后ls查看当前设备目录-exit退出当前shell环境" class="headerlink" title="进入当前设备shell环境 然后ls查看当前设备目录 exit退出当前shell环境."></a>进入当前设备shell环境 然后<strong>ls</strong>查看当前设备目录 <strong>exit</strong>退出当前shell环境.</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure>

<h2 id="复制文件到手机"><a href="#复制文件到手机" class="headerlink" title="复制文件到手机"></a>复制文件到手机</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb push test.apk /mnt/sdcard/test.apk</span><br></pre></td></tr></table></figure>

<h2 id="复制文件到电脑"><a href="#复制文件到电脑" class="headerlink" title="复制文件到电脑"></a>复制文件到电脑</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb pull  /mnt/sdcard/test.apk  test.apk</span><br></pre></td></tr></table></figure>

<h2 id="获取分辨率"><a href="#获取分辨率" class="headerlink" title="获取分辨率"></a>获取分辨率</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell wm size</span><br></pre></td></tr></table></figure>

<h2 id="切换到root权限-此时命令行提示符是-则表示没有-root-权限，是-则表示已-root。"><a href="#切换到root权限-此时命令行提示符是-则表示没有-root-权限，是-则表示已-root。" class="headerlink" title="切换到root权限 此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。"></a>切换到root权限 此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell su</span><br></pre></td></tr></table></figure>

<h2 id="查看应用列表"><a href="#查看应用列表" class="headerlink" title="查看应用列表"></a>查看应用列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages [-3][-s][包名 filter]</span><br></pre></td></tr></table></figure>

<h2 id="清除应用数据与缓存"><a href="#清除应用数据与缓存" class="headerlink" title="清除应用数据与缓存"></a>清除应用数据与缓存</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell pm clear &lt;packagename&gt;</span><br></pre></td></tr></table></figure>

<h2 id="查看前台-Activity"><a href="#查看前台-Activity" class="headerlink" title="查看前台 Activity"></a>查看前台 Activity</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys activity activities | grep mFocusedActivity</span><br></pre></td></tr></table></figure>

<h2 id="强制停止应用"><a href="#强制停止应用" class="headerlink" title="强制停止应用"></a>强制停止应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell am force-stop &lt;packagename&gt;</span><br></pre></td></tr></table></figure>

<h2 id="模拟按键"><a href="#模拟按键" class="headerlink" title="模拟按键"></a>模拟按键</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 3</span><br></pre></td></tr></table></figure>

<h2 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat *:D</span><br></pre></td></tr></table></figure>

<h2 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell wm density</span><br></pre></td></tr></table></figure>

<h2 id="显示屏参数"><a href="#显示屏参数" class="headerlink" title="显示屏参数"></a>显示屏参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys window displays</span><br></pre></td></tr></table></figure>

<h2 id="android-id"><a href="#android-id" class="headerlink" title="android_id"></a>android_id</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell settings get secure android_id</span><br></pre></td></tr></table></figure>

<h2 id="android-系统版本"><a href="#android-系统版本" class="headerlink" title="android 系统版本"></a>android 系统版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure>

<h2 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h2> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screencap -p /sdcard/sc.png</span><br></pre></td></tr></table></figure>

<h2 id="录制屏幕-ctrl-c停止录制"><a href="#录制屏幕-ctrl-c停止录制" class="headerlink" title="录制屏幕 ctrl-c停止录制"></a>录制屏幕 ctrl-c停止录制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screenrecord /sdcard/filename.mp4</span><br></pre></td></tr></table></figure>

<h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure>

<h1 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h1><h2 id="重启到recovery模式"><a href="#重启到recovery模式" class="headerlink" title="重启到recovery模式"></a>重启到recovery模式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb reboot recovery</span><br></pre></td></tr></table></figure>

<h2 id="从-Recovery-重启到-Android"><a href="#从-Recovery-重启到-Android" class="headerlink" title="从 Recovery 重启到 Android"></a>从 Recovery 重启到 Android</h2> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure>

<h2 id="重启到-Fastboot-模式"><a href="#重启到-Fastboot-模式" class="headerlink" title="重启到 Fastboot 模式"></a>重启到 Fastboot 模式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/u010375364/article/details/52344120" target="_blank" rel="noopener">https://blog.csdn.net/u010375364/article/details/52344120</a></p>
<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 集成极光推送一次血的教训</title>
    <url>/2018/04/22/Android-%E9%9B%86%E6%88%90%E6%9E%81%E5%85%89%E6%8E%A8%E9%80%81%E4%B8%80%E6%AC%A1%E8%A1%80%E7%9A%84%E6%95%99%E8%AE%AD/</url>
    <content><![CDATA[<p><figure class="banner" style="width:undefinedpx; height:undefinedpx;margin: 0 auto;">
      <img src="/medium-image-plugin/thumbnailsundefined" alt="cry" class="img-small" data-large="/imgundefined">
      </figure></p>
<p>这个问题因为自己的粗心，集成极光推送时足足浪费了我6个小时，上网搜教程不下于20篇，说多了都是泪。决定把记录下来，希望你们不要像我一样掉进坑里上不来。</p>
<a id="more"></a>

<h2 id="埋雷的地方"><a href="#埋雷的地方" class="headerlink" title="埋雷的地方"></a>埋雷的地方</h2><p>在app module的build.gradle文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       release &#123;</span><br><span class="line">           minifyEnabled false</span><br><span class="line">           signingConfig signingConfigs.releaseConfig</span><br><span class="line">           proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       debug &#123;</span><br><span class="line">          //估计我不说,大家都自己雷哪个配置了吧</span><br><span class="line">           minifyEnabled false</span><br><span class="line">           applicationIdSuffix &quot;.debug&quot;</span><br><span class="line">           signingConfig signingConfigs.releaseConfig</span><br><span class="line">           proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><p>过程就按照官方的来，什么清单文件配置了，库的复制了，资源文件复制了，细心点都不会出啥问题。</p>
<h2 id="APPKEY获取"><a href="#APPKEY获取" class="headerlink" title="APPKEY获取"></a>APPKEY获取</h2><p>去官网创建应用获取APPKey 填好你的包名，创建后会有APPkey（这里注意下，我申请时填的包名是不带.debug的 这时就已经注定了后面的命运）</p>
<h2 id="初始化极光库"><a href="#初始化极光库" class="headerlink" title="初始化极光库"></a>初始化极光库</h2><p>在application里调用init方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JPushInterface.setDebugMode(true);</span><br><span class="line">JPushInterface.init(this);</span><br></pre></td></tr></table></figure>

<h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><p>Build，跑起来，尼玛 有错误，意料之中 这时控制台抛出的错误如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">err0:D/JIGUANG-JCore: [ServiceHelper] We found the appKey is changed or register appkey is empty. Will re-register.</span><br><span class="line">err1:E/ActivityThread: Failed to find provider info for com.example.ghwang.activytest.debug.DataProvider</span><br><span class="line">err2:W/JIGUANG-JCore: [AndroidUtil] hasPermissionDefined error:com.example.ghwang.activytest.debug.permission.JPUSH_MESSAGE</span><br></pre></td></tr></table></figure>

<p>err0 和 err2 对着教程对了一遍，确认了没错，然后就立马排除了。然后就被err1 足足坑了6个小时。。。。自己新建ContentProvider啦，改包名啦，把清单文件删了又重新对着教程一句一句贴啦。（能不能不要这么坑）其实err2包名里已经提示我有debug字眼，那好，就去清单里把debug加上呗，build一下固然没有权限的错误了。咳只怪build.gradle里那个雷埋的太深,打死我都想不到。<br>然后就是一直在网上搜err1的解决方法，一直搜到想放弃。最后去洗把脸回到座位上，在跑跑看看呗，控制台的一句实在是无关紧要的日志输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Waiting for application to come online: com.example.ghwang.activytest.debug.test | com.example.ghwang.activytest.debug</span><br></pre></td></tr></table></figure>

<p>What the fuck! debug?本着怀疑的精神,终于引导我要去埋雷的地方看看了，果然就发现了雷！注释掉，重新build,从官网后台发一个消息，久违的提示音，你好。<br>这一刻，我久久不能释怀,喝了口水，从座位站起来。万千思绪，涌上心头。。。。</p>
<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使长连接保活</title>
    <url>/2018/04/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E9%95%BF%E8%BF%9E%E6%8E%A5%E4%BF%9D%E6%B4%BB/</url>
    <content><![CDATA[<h1 id="应用背景"><a href="#应用背景" class="headerlink" title="应用背景"></a>应用背景</h1><p>理论上基于TCP建立长链接后,通信通道是不会自动断开的。但是现实情况是很复杂的，比如突然切换网络。那都有什么情况下会使通信失去链接呢。主要有一下几方面</p>
<a id="more"></a>

<ul>
<li>长连接的进程被杀死</li>
<li>NAT超时(内网IP转为外网IP过程)</li>
<li>网络状态(切换网络,网络状态极差)</li>
</ul>
<h1 id="如何使长连接保活"><a href="#如何使长连接保活" class="headerlink" title="如何使长连接保活"></a>如何使长连接保活</h1><h2 id="进程保活"><a href="#进程保活" class="headerlink" title="进程保活"></a>进程保活</h2><p>针对进程被杀死的保活机制</p>
<ul>
<li>提升进程权限</li>
<li>拉起被杀死的进程</li>
</ul>
<h2 id="加入心跳机制"><a href="#加入心跳机制" class="headerlink" title="加入心跳机制"></a>加入心跳机制</h2><p>针对NAT超时采取的保活机制</p>
<ul>
<li>心跳包的约定</li>
<li>心跳包的时间间隔</li>
<li>如果双方几次心跳接收失败可断定连接已断开。</li>
</ul>
<h2 id="断线重连"><a href="#断线重连" class="headerlink" title="断线重连"></a>断线重连</h2><p>针对网络断掉采取的保活机制, 这个机制的触发,主要也是根据心跳原理</p>
<h1 id="心跳与轮询的区别"><a href="#心跳与轮询的区别" class="headerlink" title="心跳与轮询的区别"></a>心跳与轮询的区别</h1><ul>
<li>相同点：都是经过一段时间去请求一次服务器</li>
<li>不同点: 心跳是采取保活的机制,发送的数据随便定义，它是直接在当前长连接基础上进行发送数据。而轮询是为了保证信息的实效性，间隔时间去拉取数据，每次发送请求都会重新生成一个连接（TCP握手机制）</li>
</ul>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><hr>
<p><strong>ps：一下额外记录知识,跟标题没任何关系</strong></p>
<h1 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h1><ul>
<li>短轮询  客户端发起请求,不管服务端有没有数据更新都会响应客户端</li>
<li>长轮询 如果服务端没有信息更新,暂时不响应,直到有信息更新才响应到客户端。</li>
</ul>
<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Android学习摘要</title>
    <url>/2018/04/20/Android%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/</url>
    <content><![CDATA[<h1 id="不定期更新"><a href="#不定期更新" class="headerlink" title="不定期更新"></a>不定期更新</h1><a id="more"></a>



<h2 id="Scroller-ScrollTo-ScrollBy区别"><a href="#Scroller-ScrollTo-ScrollBy区别" class="headerlink" title="Scroller,ScrollTo,ScrollBy区别"></a>Scroller,ScrollTo,ScrollBy区别</h2><p><strong>Scroller</strong>是实现的一种滚动效果，<strong>ScrollTo(int x,int y)</strong>滚动到某个点,只会相对于View初始位置运动一次,因为View的初始位置是固定的。<strong>ScrollBy(int x,int y)</strong>会相对于当前位置运动。这个行为是连续的。不过这里的点的坐标取值要注意下,我们认识的Android坐标系是X轴向右是正,Y轴向下是正。如果想让View正方向运动,这时的坐标点要取<strong>负值</strong>。。。</p>
<h2 id="常见Android动画使用的类"><a href="#常见Android动画使用的类" class="headerlink" title="常见Android动画使用的类"></a>常见Android动画使用的类</h2><ul>
<li>AnimatorInflater（属性动画 res/animator）</li>
<li>AnimatorUtil （视图动画 res/anim）</li>
<li>ViewAnimator (View过渡切换)</li>
</ul>
<p>详细教程参考<a href="https://www.jianshu.com/p/2412d00a0ce4" target="_blank" rel="noopener">https://www.jianshu.com/p/2412d00a0ce4</a></p>
<h2 id="退出登录清空所有旧的Activity"><a href="#退出登录清空所有旧的Activity" class="headerlink" title="退出登录清空所有旧的Activity"></a>退出登录清空所有旧的Activity</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Intent intent = new Intent(this, LoginActivity.class);</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK |       </span><br><span class="line">Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">Bundle bundle = new Bundle();</span><br><span class="line">bundle.putBoolean(Constant.INTENT_LOGIN_AGAIN,true);</span><br><span class="line">bundle.putString(Constant.INTENT_LOGIN_MESSAGE,message);</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>

<h2 id="解决线程同步问题"><a href="#解决线程同步问题" class="headerlink" title="解决线程同步问题"></a>解决线程同步问题</h2><p>多线程要处理三个问题</p>
<ul>
<li>原子性</li>
<li>可见性</li>
<li>有序性</li>
</ul>
<p><strong>volatile</strong>主要解决可见性和有序性<br><strong>synchronized</strong>原子性</p>
<h2 id="强引用，软引用，弱引用"><a href="#强引用，软引用，弱引用" class="headerlink" title="强引用，软引用，弱引用"></a>强引用，软引用，弱引用</h2><ol>
<li>强引用（即使内存不足oom，系统也不愿意释放）</li>
<li>软引用 (内存不足时，会释放)</li>
<li>弱引用 (不管内存状态，某个时刻某个内存区域遍历到就会释放)</li>
</ol>
<h2 id="点击APP-Icon系统做了什么"><a href="#点击APP-Icon系统做了什么" class="headerlink" title="点击APP Icon系统做了什么"></a>点击APP Icon系统做了什么</h2><p>launcher会向AMS发送startActivity，然后遍历有没有缓存的进程,如果没有会通知zygote fork一个APP进程，设置好后走ActivityThread 然后初始化Looper，Handler，等待AMS发送事件过来，最后调用组件生命周期方法直到界面显示。<br>zygote是由init进程创建,init是Linux应用起点。</p>
<h2 id="View的坐标"><a href="#View的坐标" class="headerlink" title="View的坐标"></a>View的坐标</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//获取view在父view的布局规则</span><br><span class="line"> LinearLayout.LayoutParams params = (LinearLayout.LayoutParams)  loginBtn.getLayoutParams();</span><br><span class="line"> params.leftMargin = ConvertUtils.dp2px(10);</span><br><span class="line"> params.rightMargin = ConvertUtils.dp2px(10);</span><br><span class="line"> loginBtn.setLayoutParams(params);</span><br><span class="line"></span><br><span class="line"> //设置view的x,y坐标相对于父view        </span><br><span class="line"> loginBtn.setX(100);</span><br><span class="line"> loginBtn.setY(200);</span><br><span class="line"></span><br><span class="line"> //left,top只跟view最初状态有关,并不会随着view偏移而改变</span><br><span class="line"> LogUtils.d(&quot;left:&quot;+loginBtn.getLeft());</span><br><span class="line"> LogUtils.d(&quot;top:&quot;+loginBtn.getTop());</span><br><span class="line"> //print=======0,0</span><br><span class="line"></span><br><span class="line"> //view的左上角相对于父view偏移量 getX()-getLeft();getY()-getTop()</span><br><span class="line"> LogUtils.d(&quot;tx:&quot;+loginBtn.getTranslationX());</span><br><span class="line"> LogUtils.d(&quot;ty:&quot;+loginBtn.getTranslationY());</span><br><span class="line"> //print=========100,200</span><br><span class="line"></span><br><span class="line"> //view相对于父窗口的坐标(父window不是父View),ps:以下两个坐标在Activity onCreate里输出为空</span><br><span class="line"> // onWindowFocusChanged此方法里view已经绑定到窗口可以正常获取</span><br><span class="line"> int [] windowLocation = new int[2];</span><br><span class="line"> loginBtn.getLocationInWindow(windowLocation);</span><br><span class="line"> LogUtils.d(&quot;windowX:&quot;+windowLocation[0]);</span><br><span class="line"> LogUtils.d(&quot;windowY:&quot;+windowLocation[1]);</span><br><span class="line"></span><br><span class="line"> //view相对于屏幕的坐标</span><br><span class="line"> int [] screenLocation = new int[2];</span><br><span class="line"> loginBtn.getLocationInWindow(screenLocation);</span><br><span class="line"> LogUtils.d(&quot;screenX:&quot;+screenLocation[0]);</span><br><span class="line"> LogUtils.d(&quot;screenY:&quot;+screenLocation[1]);</span><br></pre></td></tr></table></figure>

<h2 id="事件分发机制"><a href="#事件分发机制" class="headerlink" title="事件分发机制"></a>事件分发机制</h2><p>当点击View时，事件会从根父视图首先调用<strong>dispatchEvent</strong>,如果父view拦截事件,那么父视图会消费该事件,如果父视图设置了<strong>onTouchListene</strong>r或<strong>onClickListener</strong>，会回调到这里。如果没设置，会回调到<strong>onTouchEvent</strong>。如果不拦截事件,事件会继续往下传,如果传到子视图，<strong>onTouchEvent</strong>返回<strong>true</strong>,子视图消费这个事件，否则事件会再传到父视图</p>
<h2 id="Android-Studio使用aar方式："><a href="#Android-Studio使用aar方式：" class="headerlink" title="Android Studio使用aar方式："></a>Android Studio使用aar方式：</h2><ol>
<li>拷贝到：libs目录 </li>
<li>build.gradle 配置文件中更改为 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repositories &#123; </span><br><span class="line"></span><br><span class="line">    flatDir &#123; </span><br><span class="line"></span><br><span class="line">        dirs&apos;libs&apos; </span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">            dependencies &#123; </span><br><span class="line"></span><br><span class="line">    compile(name:&apos;genius&apos;, ext:&apos;aar&apos;)</span><br><span class="line"></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Java中使用kotlin"><a href="#Java中使用kotlin" class="headerlink" title="Java中使用kotlin"></a>Java中使用kotlin</h2><h3 id="1-project-build-gradle中"><a href="#1-project-build-gradle中" class="headerlink" title="1.project build.gradle中"></a>1.project build.gradle中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = &apos;1.3.31&apos;</span><br><span class="line">    //...</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-app-build-gradle中"><a href="#2-app-build-gradle中" class="headerlink" title="2.app build.gradle中"></a>2.app build.gradle中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apply plugin: &apos;kotlin-android&apos;</span><br><span class="line"></span><br><span class="line">apply plugin: &apos;kotlin-android-extensions&apos;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    //...</span><br><span class="line"></span><br><span class="line">    //添加Kotlin 标准库</span><br><span class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="适配Android7-0及以上照片存储"><a href="#适配Android7-0及以上照片存储" class="headerlink" title="适配Android7.0及以上照片存储"></a>适配Android7.0及以上照片存储</h3><h4 id="（1）声明provider"><a href="#（1）声明provider" class="headerlink" title="（1）声明provider"></a>（1）声明provider</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;provider</span><br><span class="line">    android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class="line">    android:authorities=&quot;com.zhy.android7.fileprovider&quot;</span><br><span class="line">    android:exported=&quot;false&quot;</span><br><span class="line">    android:grantUriPermissions=&quot;true&quot;&gt;</span><br><span class="line">    &lt;meta-data</span><br><span class="line">        android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class="line">        android:resource=&quot;@xml/file_paths&quot; /&gt;</span><br><span class="line">&lt;/provider&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-编写resource-xml-file"><a href="#2-编写resource-xml-file" class="headerlink" title="(2)编写resource xml file"></a>(2)编写resource xml file</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;root-path name=&quot;root&quot; path=&quot;&quot; /&gt;</span><br><span class="line">    &lt;files-path name=&quot;files&quot; path=&quot;&quot; /&gt;</span><br><span class="line">    &lt;cache-path name=&quot;cache&quot; path=&quot;&quot; /&gt;</span><br><span class="line">    &lt;external-path name=&quot;external&quot; path=&quot;&quot; /&gt;</span><br><span class="line">    &lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</span><br><span class="line">     &lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</span><br><span class="line">&lt;/paths&gt;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">&lt;root-path/&gt; 代表设备的根目录new File(&quot;/&quot;);</span><br><span class="line"></span><br><span class="line">&lt;files-path/&gt; 代表context.getFilesDir()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;cache-path/&gt; 代表context.getCacheDir()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;external-path/&gt; 代表Environment.getExternalStorageDirectory()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;external-files-path&gt;代表context.getExternalFilesDirs()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;external-cache-path&gt;代表getExternalCacheDirs()</span><br><span class="line"></span><br><span class="line">节点**path**即为代表目录下的子目录</span><br></pre></td></tr></table></figure>

<h4 id="（3）使用FileProvider-API"><a href="#（3）使用FileProvider-API" class="headerlink" title="（3）使用FileProvider API"></a>（3）使用FileProvider API</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File file = new File(Environment.getExternalStorageDirectory(), filename);</span><br><span class="line">mCurrentPhotoPath = file.getAbsolutePath();</span><br><span class="line">Uri fileUri = FileProvider.getUriForFile(this, &quot;com.zhy.android7.fileprovider&quot;, file);</span><br><span class="line">takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, fileUri);</span><br></pre></td></tr></table></figure>

<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Activity四种启动模式区别</title>
    <url>/2018/04/20/Android-Activity%E5%9B%9B%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>最近在看Android相关方面的知识，看到了四大组件的Activity,看到了它的四种启动模式，为了加深自己的记忆，所以决定记录下来。</p>
<a id="more"></a>


<h2 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a>Standard</h2><p>每次启动都会new 一个新的实例</p>
<h2 id="SingleInstance"><a href="#SingleInstance" class="headerlink" title="SingleInstance"></a>SingleInstance</h2><p>会创建一个新的stack，管理这个Activity，别的应用也可以共享，跳转到这个Activity时，不会创建新的实例,并且整个application运行期间该task中只有这一个Activity</p>
<h2 id="SingleTop"><a href="#SingleTop" class="headerlink" title="SingleTop"></a>SingleTop</h2><p>栈顶复用，如果不是在栈顶,还是会新建一个实例,否则会调用onNewIntent方法,其他情况和standard模式一样</p>
<h2 id="SingleTask"><a href="#SingleTask" class="headerlink" title="SingleTask"></a>SingleTask</h2><p>如果一个Activity打开方式设置为这种方式,首先系统会根据taskAffinity去查找对应的task，如果没找到,就会在新的task中启动。如果找到相关的task，入栈时该Activity存在此时会销毁该实例上面所有的Activiy.此时该Activity会位于栈顶！d=====(￣▽￣*)b,并且会调用onNewIntent</p>
<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Activity</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2018/04/20/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><p>git命令太多，有的用到时还是要去查，索性就记下来了</p>
<a id="more"></a>


<h3 id="打轻量标签"><a href="#打轻量标签" class="headerlink" title="打轻量标签"></a>打轻量标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag v0.2.0 -light</span><br></pre></td></tr></table></figure>

<h3 id="创建附注标签"><a href="#创建附注标签" class="headerlink" title="创建附注标签"></a>创建附注标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -a v0.1.0 -m &quot;release 0.1.0 version</span><br></pre></td></tr></table></figure>

<h3 id="列出当前仓库的所有标签"><a href="#列出当前仓库的所有标签" class="headerlink" title="列出当前仓库的所有标签"></a>列出当前仓库的所有标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure>

<h3 id="查看标签版本信息"><a href="#查看标签版本信息" class="headerlink" title="查看标签版本信息"></a>查看标签版本信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git show v0.1.0</span><br></pre></td></tr></table></figure>

<h3 id="将v0-1-0标签提交到git服务器"><a href="#将v0-1-0标签提交到git服务器" class="headerlink" title="将v0.1.0标签提交到git服务器"></a>将v0.1.0标签提交到git服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin v0.1.0</span><br></pre></td></tr></table></figure>

<h3 id="将本地所有标签一次性提交到git服务器"><a href="#将本地所有标签一次性提交到git服务器" class="headerlink" title="将本地所有标签一次性提交到git服务器"></a>将本地所有标签一次性提交到git服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin –tags</span><br></pre></td></tr></table></figure>

<h3 id="误打或需要修改标签时，需要先将标签删除，再打新标签"><a href="#误打或需要修改标签时，需要先将标签删除，再打新标签" class="headerlink" title="误打或需要修改标签时，需要先将标签删除，再打新标签"></a>误打或需要修改标签时，需要先将标签删除，再打新标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -d v0.1.2</span><br></pre></td></tr></table></figure>

<h3 id="删除远端tag"><a href="#删除远端tag" class="headerlink" title="删除远端tag"></a>删除远端tag</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<h3 id="切换tag"><a href="#切换tag" class="headerlink" title="切换tag"></a>切换tag</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout v1.0.3</span><br></pre></td></tr></table></figure>

<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br></pre></td></tr></table></figure>

<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure>

<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure>

<h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure>

<h3 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure>

<h3 id="合并指定分支到当前分支"><a href="#合并指定分支到当前分支" class="headerlink" title="合并指定分支到当前分支"></a>合并指定分支到当前分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge dev</span><br></pre></td></tr></table></figure>

<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -d dev</span><br></pre></td></tr></table></figure>

<h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin --delete &lt;BranchName&gt;</span><br></pre></td></tr></table></figure>

<h3 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -m dev develop</span><br></pre></td></tr></table></figure>

<h3 id="拉取远端分支不合并"><a href="#拉取远端分支不合并" class="headerlink" title="拉取远端分支不合并"></a>拉取远端分支不合并</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git fetch origin dev(会拉取到origin/master分支)</span><br></pre></td></tr></table></figure>

<h3 id="查看修改不同"><a href="#查看修改不同" class="headerlink" title="查看修改不同"></a>查看修改不同</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff origin/master</span><br></pre></td></tr></table></figure>

<h3 id="拉取远端分支合并"><a href="#拉取远端分支合并" class="headerlink" title="拉取远端分支合并"></a>拉取远端分支合并</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull origin dev(会merge origin/master分支)</span><br></pre></td></tr></table></figure>

<h3 id="获取远程端的某个分支"><a href="#获取远程端的某个分支" class="headerlink" title="获取远程端的某个分支"></a>获取远程端的某个分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone -b dev *.git</span><br></pre></td></tr></table></figure>

<h3 id="强制创建一个基于指定的tag的分支"><a href="#强制创建一个基于指定的tag的分支" class="headerlink" title="强制创建一个基于指定的tag的分支"></a>强制创建一个基于指定的tag的分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -B dev v1.0.1</span><br></pre></td></tr></table></figure>

<h3 id="上传大文件"><a href="#上传大文件" class="headerlink" title="上传大文件"></a>上传大文件</h3><p><a href="https://git-lfs.github.com/" target="_blank" rel="noopener">git-lfs</a></p>
<p>第一步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git lfs track &quot;*.psd&quot;</span><br></pre></td></tr></table></figure>

<p>第二步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .gitattributes</span><br></pre></td></tr></table></figure>

<p>第三步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add file.psd</span><br><span class="line">git commit -m &quot;Add design file&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h3 id="返回到某一次commit前的代码-本地文件也会删除-慎用"><a href="#返回到某一次commit前的代码-本地文件也会删除-慎用" class="headerlink" title="返回到某一次commit前的代码,本地文件也会删除(慎用)"></a>返回到某一次commit前的代码,本地文件也会删除(慎用)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard xxxxxx（具体版本号或者HEAD最新提交HEAD^上一次HEAD~2上上次）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --sort xxxx(只回退提交，本地文件还在，想提交直接git commit)</span><br></pre></td></tr></table></figure>

<h3 id="查看提交记录列表"><a href="#查看提交记录列表" class="headerlink" title="查看提交记录列表"></a>查看提交记录列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog/git log</span><br></pre></td></tr></table></figure>

<h3 id="创建本地分支dev，并且和远程origin-dev分支关联"><a href="#创建本地分支dev，并且和远程origin-dev分支关联" class="headerlink" title="创建本地分支dev，并且和远程origin/dev分支关联"></a>创建本地分支dev，并且和远程origin/dev分支关联</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>

<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
  </entry>
  <entry>
    <title>网页与iOS的交互领红包案列</title>
    <url>/2017/12/18/%E7%BD%91%E9%A1%B5%E4%B8%8EiOS%E7%9A%84%E4%BA%A4%E4%BA%92%E9%A2%86%E7%BA%A2%E5%8C%85%E6%A1%88%E5%88%97/</url>
    <content><![CDATA[<h2 id="业务描述"><a href="#业务描述" class="headerlink" title="业务描述"></a>业务描述</h2><p>项目中需要实现一个领红包的业务。具体流程就是，网页端发起授权，客户端完成授权后将授权码给网页，网页端进行领红包业务处理，领取成功后再通知客户端进行业务逻辑跳转。</p>
<a id="more"></a>

<h2 id="使用的相互通信的桥梁"><a href="#使用的相互通信的桥梁" class="headerlink" title="使用的相互通信的桥梁"></a>使用的相互通信的桥梁</h2><ul>
<li>WebViewJavascriptBridge</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="导入头文件"><a href="#导入头文件" class="headerlink" title="导入头文件"></a>导入头文件</h3><ul>
<li>#import “WebViewJavascriptBridge.h”</li>
<li>#import &lt;AlipaySDK/AlipaySDK.h&gt;</li>
<li>#import “APAuthV2Info.h”</li>
<li>#import “RSADataSigner.h”</li>
</ul>
<p>备注：文件就不上传了，支付宝demo都有</p>
<p>声明一个属性@property WebViewJavascriptBridge* bridge;</p>
<h3 id="继续实现"><a href="#继续实现" class="headerlink" title="继续实现"></a>继续实现</h3><p>‘’’javascript</p>
<ul>
<li><p>(void)viewWillAppear:(BOOL)animated{</p>
<p>  [super viewWillAppear:animated];<br>//这里的if可以忽略，因为是自己的业务逻辑需要</p>
<p>  if ([self.type isEqualToString:@”weburl”]) {</p>
<pre><code>//从这里看起
  if (_bridge) { return; }

//bridge使用方法
  [WebViewJavascriptBridge enableLogging];
  _bridge = [WebViewJavascriptBridge bridgeForWebView:_web];
  [_bridge setWebViewDelegate:self];

  [self loadExamplePage:_web];

  //支付宝uid 先注册一个网页端需要调用的方法
  [_bridge registerHandler:@&quot;getPayeeUserIdByIos&quot; handler:^(id data, WVJBResponseCallback responseCallback) {

      dispatch_async(dispatch_get_main_queue(), ^{

          [self doAlipayAuth:responseCallback];

      });
  }];

  //领取红包成功后返回AR，网页端领取成功后调用客户端的方法
  [_bridge registerHandler:@&quot;getBackAr&quot; handler:^(id data, WVJBResponseCallback responseCallback) {

      dispatch_async(dispatch_get_main_queue(), ^{

          [self back];

      });
  }];</code></pre><p>  }<br>}</p>
</li>
</ul>
<p>‘’’</p>
<h3 id="支付宝登录授权部分，支付宝demo的例子"><a href="#支付宝登录授权部分，支付宝demo的例子" class="headerlink" title="支付宝登录授权部分，支付宝demo的例子"></a>支付宝登录授权部分，支付宝demo的例子</h3><p>‘’’javascript</p>
<ul>
<li><p>(void)doAlipayAuth:(WVJBResponseCallback )callback<br>{<br>  //重要说明<br>  //这里只是为了方便直接向商户展示支付宝的整个支付流程；所以Demo中加签过程直接放在客户端完成；<br>  //真实App里，privateKey等数据严禁放在客户端，加签过程务必要放在服务端完成；<br>  //防止商户私密数据泄露，造成不必要的资金损失，及面临各种安全风险；<br>  /<em>============================================================================</em>/<br>  /<em>=======================需要填写商户app申请的===================================</em>/<br>  /<em>============================================================================</em>/<br>  NSString *pid = @””;<br>  NSString *appID = @””;</p>
<p>  // 如下私钥，rsa2PrivateKey 或者 rsaPrivateKey 只需要填入一个<br>  // 如果商户两个都设置了，优先使用 rsa2PrivateKey<br>  // rsa2PrivateKey 可以保证商户交易在更加安全的环境下进行，建议使用 rsa2PrivateKey<br>  // 获取 rsa2PrivateKey，建议使用支付宝提供的公私钥生成工具生成，<br>  // 工具地址：<a href="https://doc.open.alipay.com/docs/doc.htm?treeId=291&amp;articleId=106097&amp;docType=1" target="_blank" rel="noopener">https://doc.open.alipay.com/docs/doc.htm?treeId=291&amp;articleId=106097&amp;docType=1</a></p>
<p>  NSString *privateKey = @”你的私钥”;</p>
<p>  NSString <em>rsaPrivateKey = privateKey;<br>  /</em>============================================================================<em>/<br>  /</em>============================================================================<em>/<br>  /</em>============================================================================*/</p>
<p>  //pid和appID获取失败,提示<br>  if ([pid length] == 0 ||</p>
<pre><code>[appID length] == 0 ||
([rsa2PrivateKey length] == 0 &amp;&amp; [rsaPrivateKey length] == 0))</code></pre><p>  {</p>
<pre><code>UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;提示&quot;
                                                message:@&quot;缺少pid或者appID或者私钥。&quot;
                                               delegate:self
                                      cancelButtonTitle:@&quot;确定&quot;
                                      otherButtonTitles:nil];
[alert show];
return;</code></pre><p>  }</p>
<p>  //生成 auth info 对象<br>  APAuthV2Info *authInfo = [APAuthV2Info new];<br>  authInfo.pid = pid;<br>  authInfo.appID = appID;</p>
<p>  //auth type<br>  NSString *authType = [[NSUserDefaults standardUserDefaults] objectForKey:@”authType”];<br>  if (authType) {</p>
<pre><code>authInfo.authType = authType;</code></pre><p>  }</p>
<p>  //应用注册scheme,在AlixPayDemo-Info.plist定义URL types<br>  NSString *appScheme = @”alipaysend”;</p>
<p>  // 将授权信息拼接成字符串<br>  NSString *authInfoStr = [authInfo description];<br>  NSLog(@”authInfoStr = %@”,authInfoStr);</p>
<p>  // 获取私钥并将商户信息签名,外部商户可以根据情况存放私钥和签名,只需要遵循RSA签名规范,并将签名字符串base64编码和UrlEncode<br>  NSString <em>signedString = nil;<br>  RSADataSigner</em> signer = [[RSADataSigner alloc] initWithPrivateKey:((rsa2PrivateKey.length &gt; 1)?rsa2PrivateKey:rsaPrivateKey)];<br>  if ((rsa2PrivateKey.length &gt; 1)) {</p>
<pre><code>signedString = [signer signString:authInfoStr withRSA2:YES];</code></pre><p>  } else {</p>
<pre><code>signedString = [signer signString:authInfoStr withRSA2:NO];</code></pre><p>  }</p>
<p>  // 将签名成功字符串格式化为订单字符串,请严格按照该格式<br>  if (signedString.length &gt; 0) {</p>
<pre><code>authInfoStr = [NSString stringWithFormat:@&quot;%@&amp;sign=%@&amp;sign_type=%@&quot;, authInfoStr, signedString, ((rsa2PrivateKey.length &gt; 1)?@&quot;RSA2&quot;:@&quot;RSA&quot;)];
[[AlipaySDK defaultService] auth_V2WithInfo:authInfoStr
                                 fromScheme:appScheme
                                   callback:^(NSDictionary *resultDic) {
                                       NSLog(@&quot;result = %@&quot;,resultDic);
                                       // 解析 auth code
                                       NSString *result = resultDic[@&quot;result&quot;];
                                       NSString *authCode = nil;
                                       if (result.length&gt;0) {
                                           NSArray *resultArr = [result componentsSeparatedByString:@&quot;&amp;&quot;];</code></pre></li>
</ul>
<pre><code>NSString *uid = resultArr[4];</code></pre><p>//这里调用网页端的方法并传值</p>
<pre><code>                                               callback([uid componentsSeparatedByString:@&quot;=&quot;][1]);

                                               for (NSString *subResult in resultArr) {
                                                   if (subResult.length &gt; 10 &amp;&amp; [subResult hasPrefix:@&quot;auth_code=&quot;]) {
                                                       authCode = [subResult substringFromIndex:10];
                                                       break;
                                                   }
                                               }

                                           }
                                           NSLog(@&quot;授权结果 authCode = %@&quot;, authCode?:@&quot;&quot;);
                                       }];
}</code></pre><p>}</p>
<p>‘’’</p>
<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>交互</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>safari 打开APP固定页面</title>
    <url>/2017/12/18/safari-%E6%89%93%E5%BC%80APP%E5%9B%BA%E5%AE%9A%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>如果有这个需求，从浏览器打开自己的APP并跳转到指定的页面，该怎们处理呢？这时候可以配置一个scheme来实现目的。<br>在info.plist里添加一个URL Types</p>
<a id="more"></a>

<ul>
<li>Identifier填写你的BundleId</li>
<li>Scheme 就是你的跳转标识比如test</li>
</ul>
<p>然后在浏览器里输入test://myshop?id=10086</p>
<h2 id="在Appdelegate里实现方法"><a href="#在Appdelegate里实现方法" class="headerlink" title="在Appdelegate里实现方法"></a>在Appdelegate里实现方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里处理你的业务逻辑</span></span><br><span class="line">    <span class="keyword">return</span> YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="So-Easy"><a href="#So-Easy" class="headerlink" title="So Easy!"></a>So Easy!</h2><script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>APP 跳转</tag>
      </tags>
  </entry>
  <entry>
    <title>AR窗口与Window切换处理</title>
    <url>/2017/09/08/AR%E7%AA%97%E5%8F%A3%E4%B8%8EWindow%E5%88%87%E6%8D%A2%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>最近做的一个项目需要AR模块，具体功能就是用户到一个地方后，拿起手机切换到AR窗口会有活动图标。点击图标然后跳转到新的页面。比如图片浏览，视频播放，领取红包功能。当然今天不会写这些的具体的功能及如何整合。主要还是说下窗口来回切换的问题及处理方法。</p>
<a id="more"></a>
<p>其实当应用启动时 ,AR的窗口已经在运行了。其实就是切换window的rootView。</p>
<h1 id="入口类处理"><a href="#入口类处理" class="headerlink" title="入口类处理"></a>入口类处理</h1><h2 id="AppDelegate-h"><a href="#AppDelegate-h" class="headerlink" title="AppDelegate.h"></a>AppDelegate.h</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@property (strong, nonatomic) UIWindow *unityWindow;</span><br><span class="line">@property (strong, nonatomic) UnityAppController *unityController;</span><br></pre></td></tr></table></figure>

<h2 id="AppDelegate-m"><a href="#AppDelegate-m" class="headerlink" title="AppDelegate.m"></a>AppDelegate.m</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">-(UIWindow *)unityWindow&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>  UnityGetMainWindow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)showUnityWindow&#123;</span><br><span class="line">    </span><br><span class="line">    [[UIApplication sharedApplication] setStatusBarHidden:YES];</span><br><span class="line">    self.unityWindow.hidden = NO;</span><br><span class="line"></span><br><span class="line">    [self.unityWindow makeKeyAndVisible];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)hideUnityWindow&#123;</span><br><span class="line">    </span><br><span class="line">    [[UIApplication sharedApplication] setStatusBarHidden:NO];</span><br><span class="line">    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent animated:YES];</span><br><span class="line">    self.unityWindow.hidden = YES;</span><br><span class="line">    [self.window makeKeyAndVisible];</span><br><span class="line">&#125;</span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line"><span class="comment">//添加如下代码</span></span><br><span class="line">    BOOL returnBool;</span><br><span class="line">    <span class="keyword">if</span> (_unityController == nil) &#123;</span><br><span class="line">        </span><br><span class="line">        _unityController = [[UnityAppController alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    returnBool = [_unityController application:application didFinishLaunchingWithOptions:launchOptions];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="创建一个单利类，管理切换标识控制"><a href="#创建一个单利类，管理切换标识控制" class="headerlink" title="创建一个单利类，管理切换标识控制"></a>创建一个单利类，管理切换标识控制</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@interface SendInfoARManager : NSObject</span><br><span class="line"><span class="comment">/** 是否暂停Unity */</span></span><br><span class="line">@property (assign, nonatomic) BOOL unityIsPaused;</span><br><span class="line">@property (strong,nonatomic) NSTimer *timer;</span><br><span class="line">+ (instancetype)sharedInstance;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation SendInfoARManager</span><br><span class="line"></span><br><span class="line">+ (instancetype)sharedInstance</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> LARManager *manager;</span><br><span class="line">    <span class="keyword">static</span> dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        manager = [[self alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> manager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (self = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        self.unityIsPaused = NO;</span><br><span class="line">        NSLog(@<span class="string">"单例初始化成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h1 id="UnityAppController-h"><a href="#UnityAppController-h" class="headerlink" title="UnityAppController.h"></a>UnityAppController.h</h1><h2 id="我把整个代码都贴下，怎么修改对照比对下就行了"><a href="#我把整个代码都贴下，怎么修改对照比对下就行了" class="headerlink" title="我把整个代码都贴下，怎么修改对照比对下就行了"></a>我把整个代码都贴下，怎么修改对照比对下就行了</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#import &lt;QuartzCore/CADisplayLink.h&gt;</span><br><span class="line"></span><br><span class="line">#include "PluginBase/RenderPluginDelegate.h"</span><br><span class="line"></span><br><span class="line">@<span class="class"><span class="keyword">class</span> <span class="title">UnityView</span></span>;</span><br><span class="line">@<span class="class"><span class="keyword">class</span> <span class="title">UnityViewControllerBase</span></span>;</span><br><span class="line">@<span class="class"><span class="keyword">class</span> <span class="title">DisplayConnection</span></span>;</span><br><span class="line"></span><br><span class="line">@interface UnityAppController : NSObject&lt;UIApplicationDelegate&gt;</span><br><span class="line">&#123;</span><br><span class="line">	UnityView*			_unityView;</span><br><span class="line">	CADisplayLink*		_displayLink;</span><br><span class="line"></span><br><span class="line">	UIWindow*			_window;</span><br><span class="line">	UIView*				_rootView;</span><br><span class="line">	UIViewController*	_rootController;</span><br><span class="line">	UIView*				_snapshotView;</span><br><span class="line"></span><br><span class="line">	DisplayConnection*	_mainDisplay;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// we will cache view controllers for fixed orientation</span></span><br><span class="line">	<span class="comment">// auto-rotation view contoller goes to index=0</span></span><br><span class="line">	UIViewController* _viewControllerForOrientation[<span class="number">5</span>];</span><br><span class="line">#if !UNITY_TVOS</span><br><span class="line">	UIInterfaceOrientation	_curOrientation;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">	id&lt;RenderPluginDelegate&gt;	_renderDelegate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// override it to add your render plugin delegate</span></span><br><span class="line">- (<span class="keyword">void</span>)shouldAttachRenderDelegate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this one is called at the very end of didFinishLaunchingWithOptions:</span></span><br><span class="line"><span class="comment">// after views have been created but before initing engine itself</span></span><br><span class="line"><span class="comment">// override it to register plugins, tweak UI etc</span></span><br><span class="line">- (<span class="keyword">void</span>)preStartUnity;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this one is called at first applicationDidBecomeActive</span></span><br><span class="line"><span class="comment">// NB: it will be started with delay 0, so it will run on next run loop iteration</span></span><br><span class="line"><span class="comment">// this is done to make sure that activity indicator animation starts before blocking loading</span></span><br><span class="line">- (<span class="keyword">void</span>)startUnity:(UIApplication*)application;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)startLocation;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a part of UIApplicationDelegate protocol starting with ios5</span></span><br><span class="line"><span class="comment">// setter will be generated empty</span></span><br><span class="line">@property (retain, nonatomic) UIWindow*	<span class="built_in">window</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@property (strong, nonatomic) UILabel *loclab;</span><br><span class="line">@property (strong, nonatomic) UIButton *mapBtn;</span><br><span class="line"></span><br><span class="line">@property (strong, nonatomic) UIViewController *vc;</span><br><span class="line">@property (strong, nonatomic) NSDictionary *scenicPoints;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@property (readonly, copy, nonatomic) UnityView*			unityView;</span><br><span class="line">@property (readonly, copy, nonatomic) CADisplayLink*		unityDisplayLink;</span><br><span class="line"></span><br><span class="line">@property (readonly, copy, nonatomic) UIView*				rootView;</span><br><span class="line">@property (readonly, copy, nonatomic) UIViewController*		rootViewController;</span><br><span class="line">@property (readonly, copy, nonatomic) DisplayConnection*	mainDisplay;</span><br><span class="line"></span><br><span class="line">#if !UNITY_TVOS</span><br><span class="line">@property (readonly, nonatomic) UIInterfaceOrientation		interfaceOrientation;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">@property (nonatomic, retain) id							renderDelegate;</span><br><span class="line">@property (nonatomic, copy)									<span class="keyword">void</span>(^quitHandler)();</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="comment">// Put this into mm file with your subclass implementation</span></span><br><span class="line"><span class="comment">// pass subclass name to define</span></span><br><span class="line"></span><br><span class="line">#define IMPL_APP_CONTROLLER_SUBCLASS(ClassName)	\</span><br><span class="line">@interface ClassName(OverrideAppDelegate)		\</span><br><span class="line">&#123;												\</span><br><span class="line">&#125;												\</span><br><span class="line">+(<span class="keyword">void</span>)load;									\</span><br><span class="line">@end											\</span><br><span class="line">@implementation ClassName(OverrideAppDelegate)	\</span><br><span class="line">+(<span class="keyword">void</span>)load										\</span><br><span class="line">&#123;												\</span><br><span class="line">	extern <span class="keyword">const</span> char* AppControllerClassName;	\</span><br><span class="line">	AppControllerClassName = #ClassName;		\</span><br><span class="line">&#125;												\</span><br><span class="line">@end											\</span><br><span class="line"></span><br><span class="line"><span class="comment">//inline UnityAppController*	GetAppController()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	return (UnityAppController*)[UIApplication sharedApplication].delegate;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">inline UnityAppController* GetAppController()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (UnityAppController*)[[UIApplication sharedApplication] valueForKeyPath:@<span class="string">"delegate.unityController"</span>];</span><br><span class="line">&#125;</span><br><span class="line">#define APP_CONTROLLER_RENDER_PLUGIN_METHOD(method)							\</span><br><span class="line"><span class="keyword">do</span> &#123;																		\</span><br><span class="line">	id&lt;RenderPluginDelegate&gt; delegate = GetAppController().renderDelegate;	\</span><br><span class="line">	<span class="keyword">if</span>([delegate respondsToSelector:@selector(method)])						\</span><br><span class="line">		[delegate method];													\</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">#define APP_CONTROLLER_RENDER_PLUGIN_METHOD_ARG(method, arg)				\</span><br><span class="line"><span class="keyword">do</span> &#123;																		\</span><br><span class="line">	id&lt;RenderPluginDelegate&gt; delegate = GetAppController().renderDelegate;	\</span><br><span class="line">	<span class="keyword">if</span>([delegate respondsToSelector:@selector(method:)])					\</span><br><span class="line">		[delegate method:arg];												\</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// these are simple wrappers about ios api, added for convenience</span></span><br><span class="line"><span class="keyword">void</span> AppController_SendNotification(NSString* name);</span><br><span class="line"><span class="keyword">void</span> AppController_SendNotificationWithArg(NSString* name, id arg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> AppController_SendUnityViewControllerNotification(NSString* name);</span><br></pre></td></tr></table></figure>

<h2 id="UnityAppController-m"><a href="#UnityAppController-m" class="headerlink" title="UnityAppController.m"></a>UnityAppController.m</h2><h3 id="主要修改"><a href="#主要修改" class="headerlink" title="主要修改"></a>主要修改</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)startUnity:(UIApplication*)application</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//这个地方是主要的处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span> ([SendInfoARManager sharedInstance].unityIsPaused) &#123;</span><br><span class="line">        UnityPause(<span class="literal">false</span>);</span><br><span class="line">        [SendInfoARManager sharedInstance].unityIsPaused = NO;</span><br><span class="line">        NSLog(@<span class="string">"设置rootView为Unity界面"</span>);</span><br><span class="line">        self.window.rootViewController = self.rootViewController;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSAssert(_unityAppReady == NO, @<span class="string">"[UnityAppController startUnity:] called after Unity has been initialized"</span>);</span><br><span class="line"></span><br><span class="line">	UnityInitApplicationGraphics();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// we make sure that first level gets correct display list and orientation</span></span><br><span class="line">	[[DisplayManager Instance] updateDisplayListInUnity];</span><br><span class="line"></span><br><span class="line">	UnityLoadApplication();</span><br><span class="line">	Profiler_InitProfiler();</span><br><span class="line"></span><br><span class="line">	[self showGameUI];</span><br><span class="line">	[self createDisplayLink];</span><br><span class="line"></span><br><span class="line">	UnitySetPlayerFocus(<span class="number">1</span>);</span><br><span class="line">    UnityPause(<span class="literal">true</span>); <span class="comment">//解决手机发烫临时补救措施</span></span><br><span class="line">    [UIApplication sharedApplication].idleTimerDisabled=NO;<span class="comment">//自动锁屏</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="最终切换实现"><a href="#最终切换实现" class="headerlink" title="最终切换实现"></a>最终切换实现</h1><h2 id="显示AR"><a href="#显示AR" class="headerlink" title="显示AR"></a>显示AR</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//进入unity界面</span></span><br><span class="line"> AppDelegate *app = (AppDelegate*)[UIApplication sharedApplication].delegate;</span><br><span class="line"> [app showUnityWindow];</span><br><span class="line">  UnityPause(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h2 id="隐藏AR界面"><a href="#隐藏AR界面" class="headerlink" title="隐藏AR界面"></a>隐藏AR界面</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[SendInfoARManager sharedInstance].unityIsPaused = YES;</span><br><span class="line">UnityPause(<span class="literal">true</span>);</span><br><span class="line">AppDelegate *app = (AppDelegate*)[UIApplication sharedApplication].delegate;</span><br><span class="line">[app hideUnityWindow];</span><br><span class="line">app.window.rootViewController = <span class="string">"你的原始窗口根控制器"</span>;</span><br></pre></td></tr></table></figure>

<h1 id="将u3d工程与自己工程整合的相关链接"><a href="#将u3d工程与自己工程整合的相关链接" class="headerlink" title="将u3d工程与自己工程整合的相关链接"></a>将u3d工程与自己工程整合的相关链接</h1><h3 id="http-www-jianshu-com-p-487015f3bb13"><a href="#http-www-jianshu-com-p-487015f3bb13" class="headerlink" title="http://www.jianshu.com/p/487015f3bb13"></a><a href="http://www.jianshu.com/p/487015f3bb13" target="_blank" rel="noopener">http://www.jianshu.com/p/487015f3bb13</a></h3><h3 id="http-www-qingpingshan-com-rjbc-ios-187333-html"><a href="#http-www-qingpingshan-com-rjbc-ios-187333-html" class="headerlink" title="http://www.qingpingshan.com/rjbc/ios/187333.html"></a><a href="http://www.qingpingshan.com/rjbc/ios/187333.html" target="_blank" rel="noopener">http://www.qingpingshan.com/rjbc/ios/187333.html</a></h3><script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>AR</tag>
      </tags>
  </entry>
  <entry>
    <title>OC本地数据分页读取</title>
    <url>/2017/08/18/datapage/</url>
    <content><![CDATA[<p>主要是sql语句limit的使用</p>
<a id="more"></a>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h3><p>原来做的项目涉及到分页都是后台处理的。但是最近有个项目需要自己本地做分页。于是自己尝试着写了一下主要还是sql语句limit的使用    废话不多说，直接上代码吧</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ (NSMutableArray *)getAllMessage:(NSString *)type page:(NSString *)page size:(NSString *)size&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    FMDatabase *db = [SendIFDataBaseUnity getDatabase];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (![db open]) &#123;</span><br><span class="line">        <span class="keyword">return</span> nil;</span><br><span class="line">    &#125;</span><br><span class="line">    [db setShouldCacheStatements:YES];</span><br><span class="line">    <span class="keyword">if</span> (![db tableExists:@<span class="string">"messagetable"</span>]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nil;</span><br><span class="line">    &#125;</span><br><span class="line">    int limit0;</span><br><span class="line">    int limit1;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([page intValue] == <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        limit0 = <span class="number">0</span>;</span><br><span class="line">        limit1 = <span class="number">9</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">        limit0 = [page intValue]*[size intValue];</span><br><span class="line">        limit1 = [page intValue]*[size intValue]+<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NSString *sql;</span><br><span class="line">    <span class="keyword">if</span> ([type intValue] == <span class="number">-1</span>) &#123; <span class="comment">//全部</span></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">           sql = [NSString stringWithFormat:@<span class="string">"select * from messagetable  order by createTime desc limit 10 offset %d"</span>,limit0];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">            sql = [NSString stringWithFormat:@<span class="string">"select * from messagetable where type=%@ order by createTime desc limit %d,%d"</span>,type,limit0,limit1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    FMResultSet *resultSet = [db executeQuery:sql];</span><br><span class="line">    NSMutableArray *resultArr = [[NSMutableArray alloc] initWithCapacity:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ([resultSet next]) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里处理模型赋值    </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [resultSet close];</span><br><span class="line">    [db close];</span><br><span class="line">    <span class="keyword">return</span> resultArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>FMDB PAGESIZE</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS动画小结</title>
    <url>/2016/11/27/iOS%E5%8A%A8%E7%94%BB%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="动画总结"><a href="#动画总结" class="headerlink" title="动画总结"></a>动画总结</h2><a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在iOS开发中，如果遇到稍微复杂的交互，就不知道如何去实现这个效果，加上iOS动画又非常的庞杂，总是让你眼花缭乱。如果平时不注重总结和分类，到用的时候还真是不知道从哪里下手。所有今天把平时在项目中用的动画分类总结一下。</p>
<h4 id="直接使用UIView封装好的动画"><a href="#直接使用UIView封装好的动画" class="headerlink" title="直接使用UIView封装好的动画"></a>直接使用UIView封装好的动画</h4><p>UIView 动画本质是对CoreAnimation的封装，因为它提供了简洁而且高效的接口。可以用来用作动画的属性有：</p>
<ol>
<li><strong>大小的变化（frame）</strong></li>
<li><strong>拉伸的变化（bounds）</strong></li>
<li><strong>中心位置（center）</strong></li>
<li><strong>旋转（transform）</strong></li>
<li><strong>透明度（alpha）</strong></li>
<li><strong>背景颜色（backgroundcolor）</strong> </li>
</ol>
<p>这类动画平时在项目中用的是最多的，可以基本满足一般的动画效果。废话不多说直接贴一段最近项目中使用的一段代码，实现的效果很简单就是透明度的变化及背景变化。项目启动时调用此方法<br>    #pragma mark - 开始动画<br>    - (void)startAnimation{</p>
<pre><code>UIViewController *tempVC = [[UIViewController alloc] init];
tempVC.view.backgroundColor = [UIColor whiteColor];
self.window.rootViewController = tempVC;


UIImageView *imgView1 = [[UIImageView alloc]initWithImage:[UIImage imageNamed:@&quot;animation1.jpg&quot;]];

imgView1.frame = self.window.frame;
[tempVC.view addSubview:imgView1];



UIImageView *imgView2 = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;animation2.jpg&quot;]];
imgView2.frame = self.window.frame;
imgView2.alpha = 0;
[tempVC.view addSubview:imgView2];

[UIView animateWithDuration:3.0 delay:0 options:UIViewAnimationOptionCurveEaseIn animations:^{
    imgView1.alpha = 0;//简单的透明度动画
} completion:^(BOOL finished) {

}];

[UIView animateWithDuration:2.0 delay:1 options:UIViewAnimationOptionCurveEaseIn animations:^{
    imgView2.alpha = 1;

} completion:^(BOOL finished) {

    [imgView2 removeFromSuperview];
    sleep(2);
    if ([[SendIFAPPDefault shareAppDefault].isFirstLanuch intValue] == 0) {

    //动画完成后处理逻辑
    }else{


    }

}];

}</code></pre><p>这类动画别的属性就不一一举例了，以此类推。</p>
<h4 id="转场动画"><a href="#转场动画" class="headerlink" title="转场动画"></a>转场动画</h4><p>这类动画是在切换页面时，可以加个过度效果，说到转场动画就要说到CATransition这个类了。还是先贴代码主要的属性再仔细说下。</p>
<pre><code>CATransition *animation = [CATransition animation];
[animation setDuration:1.25f];
[animation setTimingFunction:[CAMediaTimingFunction
functionWithName:kCAMediaTimingFunctionEaseIn]];
[animation setType:kCATransitionReveal];
[animation setSubtype: kCATransitionFromBottom];
[self.view.layer addAnimation:animation forKey:@&quot;Reveal&quot;];</code></pre><p>需要注意的地方就是，<strong>type</strong>和<strong>subtype</strong>,因为这两个属性决定了转场的效果。先来看看这两个属性都有哪些值</p>
<p><strong>type</strong></p>
<pre><code>Fade = 1,                   //淡入淡出
Push,                       //推挤
Reveal,                     //揭开
MoveIn,                     //覆盖
Cube,                       //立方体
SuckEffect,                 //吮吸
OglFlip,                    //翻转
RippleEffect,               //波纹
PageCurl,                   //翻页
PageUnCurl,                 //反翻页
CameraIrisHollowOpen,       //开镜头
CameraIrisHollowClose,      //关镜头
CurlDown,                   //下翻页
CurlUp,                     //上翻页
FlipFromLeft,               //左翻转
FlipFromRight,              //右翻转</code></pre><p><strong>subType</strong></p>
<pre><code>kCATransitionFromLeft
kCATransitionFromRight
kCATransitionFromTop
kCATransitionFromBottom
kCATruncationMiddle</code></pre><p>简单的从单词来看就知道这个属性是控制效果方向的<br>最后再啰嗦一句，这个效果是作用于CALayer上的，直接添加在view上是没有任何效果的</p>
<h4 id="CoreAnimation-核心动画"><a href="#CoreAnimation-核心动画" class="headerlink" title="CoreAnimation(核心动画)"></a>CoreAnimation(核心动画)</h4><p>如果一个效果十分复杂，前面介绍的动画实现起来困难或者实现不了，这个时候就需要用Layer动画了，既然提到Layer，这类的动画肯定是作用于layer上了。先来看看Layer都有哪些属性。如果属性都不清楚，当然效果也是做不出来的</p>
<ul>
<li><strong>bounds</strong> 和UIview一样，都有这个属性</li>
<li><strong>position</strong> 默认为中点，和UIview的center一致</li>
<li><strong>anchorPoint</strong> x,y的范围都是0到1</li>
<li><strong>backgroundColor</strong> 这个背景颜色是CGColorRef 类型</li>
<li><strong>transform</strong> 形变属性（2D,3D）</li>
</ul>
<p>如果对postion和anchorPoint 有疑惑的话可以<a href="http://kittenyang.com/anchorpoint/" target="_blank" rel="noopener">点击这里</a><br>前面的属性跟UIView差不多，就把这个<strong>transform</strong>简单的说下吧<br>动画效果包括<strong>平移，旋转和缩放</strong></p>
<p><strong>2D效果</strong><br>这类是作用于UIview上的</p>
<pre><code>CGAffineTransform CGAffineTransformMakeTranslation(CGFloat       tx, CGFloat ty) 

CGAffineTransform CGAffineTransformMakeScale(CGFloat sx,         CGFloat sy)   

CGAffineTransform CGAffineTransformMakeRotation(CGFloat          angle)</code></pre><p><strong>3D效果</strong><br>这类是作用于layer上的</p>
<pre><code>CATransform3D CATransform3DMakeRotate (CATransform3D t,          CGFloat angle, CGFloat     x, CGFloat y, CGFloat z);//旋转

CATransform3D CATransform3DMakeScale (CATransform3D t,           CGFloat sx, CGFloat sy, CGFloat sz) //缩放

CATransform3D CATransform3DMakeTranslation (CGFloat tx,          CGFloat ty, CGFloat tz) //平移</code></pre><h5 id="基础动画"><a href="#基础动画" class="headerlink" title="基础动画"></a>基础动画</h5><p>CABasicAnimation是CAPropertyAnimation的子类,CAPropertyAnimation有一个字符串类型的keyPath属性.还是简单的放个例子吧</p>
<pre><code>CABasicAnimation *anim = [CABasicAnimation animationWithKeyPath:@&quot;transform&quot;];
anim.duration = 1.5; // 动画持续1.5s

// CALayer的宽度从0.5倍变为2倍
// CALayer的高度从0.5倍变为1.5倍
anim.fromValue = [NSValue valueWithCATransform3D:CATransform3DMakeScale(0.5, 0.5, 1)];
anim.toValue  = [NSValue valueWithCATransform3D:CATransform3DMakeScale(2, 1.5, 1)];

[_myView.layer addAnimation:anim forKey:nil];</code></pre><p>基础动画最重要的就是指定一个keypath，因为这个keypath是个单纯的字符串，写代码时也不会提示有什么作用于动画。用的时候很不方便，这里我贴出平时逛博客记录的一些属性，算是比较全了</p>
<pre><code>transform.scale = 缩放

transform.scale.x = x轴缩放

transform.scale.y = y轴上缩放

transform.rotation.z = 旋转

opacity = 透明度

margin

zPosition

backgroundColor    背景颜色

cornerRadius    圆角

borderWidth

bounds

contents

contentsRect

cornerRadius

frame

hidden

mask

masksToBounds

opacity

position

shadowColor

shadowOffset

shadowOpacity

shadowRadius</code></pre><h5 id="关键帧动画"><a href="#关键帧动画" class="headerlink" title="关键帧动画"></a>关键帧动画</h5><p>所谓关键帧动画，就是给需要动画效果的属性，准备一组与时间相关的值，这些值都是在动画序列中比较关键的帧中提取出来的，而其他时间帧中的值，可以用这些关键值，采用特定的插值方法计算得到，从而达到比较流畅的动画效果。废话不啰嗦，直接贴项目中用到的一处。基于MBHUB自定义网络提示动画</p>
<pre><code>UIView *custom = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];
custom.backgroundColor = [UIColor purpleColor];
custom.layer.cornerRadius = 10;
custom.layer.masksToBounds = YES;
custom.backgroundColor = [UIColor colorWithRed:231.0/255 green:215.0/255 blue:198.0/255 alpha:1.0];
UIImageView *smallTop = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;icon_loading_02&quot;]];
smallTop.frame = CGRectMake((custom.bounds.size.width-48)/2, 20, 48, 48);
[custom addSubview:smallTop];
UIImageView *bigImg = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;icon_loading_01&quot;]];
bigImg.frame = CGRectMake((custom.bounds.size.width-48)/2, 20, 48, 48);
[custom addSubview:bigImg];
UILabel *warnLab = [[UILabel alloc] initWithFrame:CGRectMake(0, CGRectGetMaxY(bigImg.frame), custom.bounds.size.width, 15)];
warnLab.text = @&quot;努力加载中...&quot;;
warnLab.textAlignment = NSTextAlignmentCenter;
warnLab.font = [UIFont systemFontOfSize:12];
[custom addSubview:warnLab];

//圆周运动
CGRect boundingRect = CGRectMake(-1, -1, 2, 2);
CAKeyframeAnimation *orbit = [CAKeyframeAnimation animation];
orbit.keyPath = @&quot;position&quot;;
orbit.path = CFAutorelease(CGPathCreateWithEllipseInRect(boundingRect, NULL));
orbit.duration = 4;
orbit.additive = YES;
orbit.repeatCount = HUGE_VALF;
orbit.calculationMode = kCAAnimationPaced;
orbit.rotationMode = kCAAnimationRotateAuto;
[smallTop.layer addAnimation:orbit forKey:@&quot;oribit&quot;];


MBProgressHUD *hub = [MBProgressHUD showHUDAddedTo:[[UIApplication sharedApplication] keyWindow] animated:YES];
hub.mode = MBProgressHUDModeCustomView;
hub.dimBackground = NO;
hub.color = [UIColor clearColor];
hub.customView = custom;
return hub;</code></pre><p>关键帧还有个很重要的属性Path,它是CGPathRef类型。配合CAShapelayer,UIBezierPath可以实现很复杂的动画，这里就不再举例了。</p>
<h5 id="动画组"><a href="#动画组" class="headerlink" title="动画组"></a>动画组</h5><p>顾名思义，就是可以将几个或多个动画效果放在一起的类，具体使用请看下面列子<br>       //动画组<br>     CAAnimationGroup *animGroup = [CAAnimationGroup animation];</p>
<pre><code>animGroup.animations = [NSArray arrayWithObjects:posAnim,        scaleAnim, opacityAnim, nil];

animGroup.duration = 1;
[imgView.layer addAnimation:animGroup forKey:nil];</code></pre><p>对，就是这个<strong>animations</strong>属性，是一个数组类型，将各个简单的基本的动画放在一起就可以实现一些复杂的效果。</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>再复杂的动画也都是基于上面的介绍的基本动画组成。遇到复杂的交互时，要善于去拆分，然后将基本的动画一一实现，然后再组合，就是实现了那些很炫很酷的动画效果了。</p>
<hr>
<h3 id="附-资源"><a href="#附-资源" class="headerlink" title="附 资源"></a>附 资源</h3><ul>
<li><a href="https://github.com/AlfredTheBest/iOS_core_animation" target="_blank" rel="noopener">iOS动画核心技巧</a></li>
<li><a href="https://github.com/facebook/pop" target="_blank" rel="noopener">pop</a></li>
<li><a href="https://dribbble.com/" target="_blank" rel="noopener">国外很不错交互设计网站</a></li>
</ul>
<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>swift练习</title>
    <url>/2015/12/16/swiftBase/</url>
    <content><![CDATA[<p>闲来无事，看的例子还是觉得自己先敲一遍，印象会深刻些！例子涉及的都是swift简单的语法。</p>
<a id="more"></a>



<h3 id="基本练习"><a href="#基本练习" class="headerlink" title="基本练习"></a>基本练习</h3><pre><code class="bash">
    var str = <span class="string">"Hello, playground"</span>
    var cc: Int?
    cc = 100

    <span class="built_in">let</span> ccc: Int = 200;

    <span class="built_in">let</span> z = cc!+ccc

    <span class="built_in">print</span>(<span class="string">"cc===\(cc)ccc===\(z)"</span>)


    <span class="built_in">let</span> y = <span class="string">"30"</span>;
    <span class="built_in">let</span> yy = Int(y);
    <span class="built_in">print</span>(<span class="string">"yy==\(yy)"</span>)


    var kj: String?
    <span class="keyword">if</span> <span class="built_in">let</span> newkj = kj{

    var kjj = kj!+<span class="string">"jfkjkd"</span>

    }<span class="keyword">else</span>{

    <span class="built_in">print</span>(<span class="string">"kj===\(kj)"</span>)
    }

    var age: Int! = 0

    var agee = age+100

    <span class="keyword">if</span> <span class="built_in">let</span> newage = age{

    <span class="built_in">print</span>(<span class="string">"agee=\(agee)"</span>)

    }


``` bash

<span class="comment">### ...用法</span>


    <span class="keyword">for</span> i <span class="keyword">in</span> 1..&lt;100{

    <span class="built_in">print</span>(<span class="string">"i=\(i)"</span>)

    }

    var strr = <span class="string">"hello world"</span>
    var range = <span class="string">"a"</span>...<span class="string">"z"</span>
    <span class="keyword">for</span> t <span class="keyword">in</span> strr.characters{


    <span class="keyword">if</span> range.contains(String(t)){

        <span class="built_in">print</span>(t)
    }
    }

``` bash
<span class="comment">### 分支语句</span>

    var lista = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]
    <span class="built_in">let</span> bb = lista[1]

    switch bb {

    <span class="keyword">case</span> <span class="string">"a"</span>,<span class="string">"b"</span>:
    <span class="built_in">print</span>(<span class="string">"b=a"</span>)
    default:
    <span class="built_in">break</span>

    }


``` bash
<span class="comment">###  闭包</span>

    func sum(num1 num1:Int,num2:Int) -&gt; Int{


    <span class="built_in">return</span> num1+num2
    }

    sum(num1: 100, num2: 200)

    func add() -&gt; ()-&gt;Int{


    var total = 0
    var step = 1

    func fn()-&gt;Int{

        total+=step
        <span class="built_in">return</span> total
    }

    <span class="built_in">return</span> fn

    }

    <span class="built_in">print</span>(add())

``` bash
<span class="comment">###  类</span>


    class Person {

    var name:String?

    init(name:String){

        self.name = name

    }
    deinit{

        <span class="built_in">print</span>(<span class="string">"die"</span>)
    }

    func showMessage(content: String){

        <span class="built_in">print</span>(<span class="string">"my name is \(self.name)+\(content)"</span>)

    }
    }

    var p = Person(name: <span class="string">"gh"</span>)
    p.showMessage(<span class="string">"are you ok"</span>)

    var p2 = p
    p2.name = <span class="string">"wx"</span>
    p2.showMessage(<span class="string">"not"</span>)

    <span class="keyword">if</span> p === p2 {

    <span class="built_in">print</span>(<span class="string">"the same"</span>)

    }



``` bash
<span class="comment">### 属性</span>

    class Account {

    var balance:Double = 0.0{

        willSet{

            self.balance = 2.0
            <span class="built_in">print</span>(<span class="string">"willset.balance,newvalue=\(newValue) value=\            (self.balance)"</span>)
        }
        didSet{

            self.balance = 3.0
            <span class="built_in">print</span>(<span class="string">"didset.balance,newvalue=\(oldValue) value=\            (self.balance)"</span>)
        }

    }


}


    class Personn {

    //存储属性
    var firstName:String
    var lastName:String

    <span class="built_in">let</span> age:Int

    init(first:String,last:String){

        self.firstName = first
        self.lastName = last
        age = 28
    }



    //计算属性

    //计算属性并不直接存储一个值，而是提供getter来获取一个值，或者利用setter来间接设置其他属性；
    // lazy属性必须有初始值，必须是变量不能是常量（因为常量在构造完成之前就已经确定了值）；
    //在构造方法之前存储属性必须有值，无论是变量属性（var修饰）还是常量属性（<span class="built_in">let</span>修饰）这个值既可以在属性创建时指定也可以在构造方法内指定；

    var fullName:String{

        get
        {

            <span class="built_in">return</span> self.firstName+<span class="string">"."</span>+self.lastName

        }
        <span class="built_in">set</span>
        {

            <span class="built_in">print</span>(<span class="string">"newValue===\(newValue)"</span>)

        }

    }

    lazy var acc = Account()

    func <span class="function"><span class="title">showMessage</span></span>(){

        <span class="built_in">print</span>(<span class="string">"name=\(self.fullName)"</span>)

    }

    //类属性
    static var skin:[String]{

        <span class="built_in">return</span> [<span class="string">"yellow"</span>,<span class="string">"white"</span>,<span class="string">"black"</span>]

    }


    class func <span class="function"><span class="title">classMethod</span></span>(){


        <span class="built_in">print</span>(<span class="string">"class method"</span>)

    }

    final func <span class="function"><span class="title">sayHello</span></span>(){


        //子类无法重载
    }

}

    var pn = Personn(first: <span class="string">"wang"</span>, last: <span class="string">"guohui"</span>)
    pn.acc.balance = 100
    pn.showMessage()
    Personn.classMethod()

    <span class="keyword">for</span> color <span class="keyword">in</span> Personn.skin{

    <span class="built_in">print</span>(color)
    }

    class Student: Personn {

    override func <span class="function"><span class="title">showMessage</span></span>() {

        <span class="built_in">print</span>(<span class="string">"student===\(self.firstName).\(self.lastName)"</span>)
    }

    override var fullName:String{

        get{

            <span class="built_in">return</span> super.fullName
        }
        <span class="built_in">set</span>{



        }

    }
}

    var s = Student(first: <span class="string">"xiao"</span>, last: <span class="string">"ming"</span>)
    s.showMessage()

``` bash
<span class="comment">### 协议</span>

    protocol Named{

    var name:String {get <span class="built_in">set</span>}
    static var className:String{get}
    init(name:String)
    func showName()
    static func showClassName()

    }


    protocol Scored{

    var score:Double{get <span class="built_in">set</span>}

    }

    class Person2: Named {

    var name:String
    var age:Int = 0
    static var className:String{

        <span class="built_in">return</span> <span class="string">"Person2"</span>
    }
    required init(name: String) {
        self.name = name
    }
    func <span class="function"><span class="title">showName</span></span>() {
        <span class="built_in">print</span>(<span class="string">"name=\(self.name)"</span>)
    }
    static func <span class="function"><span class="title">showClassName</span></span>() {

        <span class="built_in">print</span>(<span class="string">"Class name is Person2"</span>)
    }
}

    class Student2: Person2,Scored {

    var score:Double = 0.0

    init(name: String, score:Double) {

        self.score = score;
        super.init(name: name)

    }
    required init(name:String){

        super.init(name:name)
    }
    func <span class="function"><span class="title">test</span></span>(){


        <span class="built_in">print</span>(<span class="string">"\(self.name) is testing."</span>)
    }

}

    var p22 = Person2(name: <span class="string">"Kenshin Cui"</span>)
    p22.showName()
    <span class="built_in">print</span>(<span class="string">"classname=\(Person2.className)"</span>)
    Person2.showClassName()
    p22.age = 30


    var s22 = Student2(name: <span class="string">"Kaoru"</span>, score: 100)
    s22.showName()

    <span class="built_in">let</span> b1 = s22 is Scored
    <span class="keyword">if</span> b1{

    <span class="built_in">print</span>(<span class="string">"s22 has score property"</span>)
    }

    <span class="keyword">if</span> <span class="built_in">let</span> s33 = s22 as? Scored{

    <span class="built_in">print</span>(<span class="string">"s33 score is\(s33.score)"</span>)
    }

    <span class="built_in">let</span> s44 = s22 as Scored
    <span class="built_in">print</span>(<span class="string">"s44 score is\(s44.score)"</span>)


``` bash
<span class="comment">### 扩展</span>


    extension Person{

    //只能扩展便利构造器
    convenience <span class="function"><span class="title">init</span></span>(){
        self.init()
    }

    //只能扩展计算属性
    var personInfo:String{

        <span class="built_in">return</span> <span class="string">"firstname"</span>

    }
    //扩展实例方法
    func <span class="function"><span class="title">sayGreet</span></span>(){


        <span class="built_in">print</span>(<span class="string">"say hello"</span>)
    }

    //嵌套类型
    enum Hoppy{

        <span class="keyword">case</span> Reading,Swimming,Sing
    }

    //扩展类型方法
    static func hoppy() -&gt; [Hoppy]{

        <span class="built_in">return</span> [.Reading,.Swimming,.Sing]
    }


}

    var pex = Person(name: <span class="string">"xiao hua"</span>)
    pex.sayGreet()
    Person.hoppy()



``` bash
<span class="comment">### 结构体</span>

    struct World{

    var name:String
    var child:String
    var intro:String{

        <span class="built_in">return</span> <span class="string">"a beautilully"</span>
    }

    func <span class="function"><span class="title">showMessage</span></span>(){

        <span class="built_in">print</span>(name+<span class="string">"  "</span>+child)
    }
    static func <span class="function"><span class="title">showStructName</span></span>(){

        <span class="built_in">print</span>(<span class="string">"world"</span>)

    }


}

    var w = World(name: <span class="string">"earth"</span>, child: <span class="string">"china"</span>)
    w.showMessage()
    World.showStructName()

    var w2 = w
    w2.name = <span class="string">"earth2"</span>
    w2.child = <span class="string">"amera"</span>
    w2.showMessage()
    w.showMessage()




``` bash
<span class="comment">### 枚举</span>


    enum Season:Int{

    <span class="keyword">case</span> Spring = 10
    <span class="keyword">case</span> Summer
    <span class="keyword">case</span> Autumn
    <span class="keyword">case</span> Winter

    }

    var sen = Season.Spring

    switch sen {

    <span class="keyword">case</span> .Spring:
    <span class="built_in">print</span>(<span class="string">"spring"</span>)
    <span class="keyword">case</span> .Summer:
    <span class="built_in">print</span>(<span class="string">"summer"</span>)
    <span class="keyword">case</span> .Autumn:
    <span class="built_in">print</span>(<span class="string">"autumn"</span>)
    default:
    <span class="built_in">print</span>(<span class="string">"winter"</span>)


    }
    var sum = Season.Summer
    <span class="built_in">print</span>(<span class="string">"summer=\(sum)"</span>)




<span class="comment">## 2.0 新特性</span>

``` bash
<span class="comment">### 异常处理</span>

    enum WechatError: ErrorType{

    <span class="keyword">case</span> NoBattery
    <span class="keyword">case</span> NoNetwork
    <span class="keyword">case</span> NoDataStream

    }


    class STwo {

    func check(person:[String:String]){

        guard <span class="built_in">let</span> id = person[<span class="string">"id"</span>] <span class="keyword">else</span> {

            <span class="built_in">print</span>(<span class="string">"没有身份证，不得进场"</span>)
            <span class="built_in">return</span>
        }

        guard <span class="built_in">let</span> exam = person[<span class="string">"exam"</span>] <span class="keyword">else</span>{

            <span class="built_in">print</span>(<span class="string">"没有准考证，不得进场"</span>)
            <span class="built_in">return</span>

        }

        <span class="built_in">print</span>(<span class="string">"身份证：\(id),准考证\(exam)"</span>)


        <span class="keyword">if</span> <span class="comment">#available(iOS 8,*){</span>

            <span class="built_in">print</span>(<span class="string">"ios 8 +"</span>)

        }<span class="keyword">else</span>{


            <span class="built_in">print</span>(<span class="string">"ios8 -"</span>)
        }



        var i = 0
        repeat {

            i++
            <span class="built_in">print</span>(i)

        }<span class="keyword">while</span> i &lt; 100


    }


    func checkIsWeChatOk(isPhoneHasBattery:Bool,isPhoneHasNetwork:Bool,dataStream:Int) throws{


        guard isPhoneHasBattery <span class="keyword">else</span>{

            throw WechatError.NoBattery

        }

        guard isPhoneHasNetwork <span class="keyword">else</span>{

            throw WechatError.NoNetwork
        }

        guard dataStream &gt; 50 <span class="keyword">else</span>{

            throw WechatError.NoDataStream

        }

    }


    func playWechat(isPhoneHasBattery:Bool,isPhoneHasNewwork:Bool,dataSteam:Int){

        <span class="keyword">do</span>{

            try checkIsWeChatOk(isPhoneHasBattery, isPhoneHasNetwork: isPhoneHasNewwork, dataStream: dataSteam)

            <span class="built_in">print</span>(<span class="string">"没有异常，every ok"</span>)


        }catch WechatError.NoBattery{

           <span class="built_in">print</span>(<span class="string">"没电了"</span>)

        }catch WechatError.NoNetwork{

            <span class="built_in">print</span>(<span class="string">"没网了"</span>)


        }catch WechatError.NoDataStream{

            <span class="built_in">print</span>(<span class="string">"没流量了"</span>)


        }catch{


            <span class="built_in">print</span>(<span class="string">"见鬼了"</span>)
        }

    }
}

    var tt = STwo()
    tt.check([<span class="string">"id"</span>:<span class="string">"1234"</span>])
    tt.check([<span class="string">"exam"</span>:<span class="string">"4321"</span>])
    tt.check([<span class="string">"id"</span>:<span class="string">"1234"</span>,<span class="string">"exam"</span>:<span class="string">"4321"</span>])

    tt.playWechat(<span class="literal">true</span>, isPhoneHasNewwork: <span class="literal">true</span>, dataSteam: 25)

``` bash
<span class="comment">### Block</span>

    typealias funcBlock = () -&gt; ()//无参无返回值
    typealias funcBlockA = (Int,Int) -&gt; String
    typealias funcBlockB = (Int,Int) -&gt; (String) -&gt; Void //返回值是函数指针
    typealias funcBlockC = (Int,Int) -&gt; (String) -&gt; String

    class blockDemo {

    var blockPropertyNo:funcBlock = {<span class="built_in">print</span>(<span class="string">"no return exec"</span>)}
    var blockProperty:funcBlockA = {a,b <span class="keyword">in</span> <span class="built_in">return</span> String(a+b)}
    var blockPropertyA:funcBlockA?
    var blockPropertyB:funcBlockB!

    <span class="function"><span class="title">init</span></span>(){



    }




}




</code></pre>
<script src="/medium-image-plugin/lib.js"></script>
      <link rel="stylesheet" href="/medium-image-plugin/lib.css">]]></content>
      <categories>
        <category>swift</category>
      </categories>
      <tags>
        <tag>swift，技术</tag>
      </tags>
  </entry>
</search>
